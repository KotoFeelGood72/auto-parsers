#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ CI/CD
# –ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

echo -e "${GREEN}"
echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç CI/CD –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
echo "=============================================="
echo -e "${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "package.json" ] || [ ! -f "docker-compose.yml" ]; then
    error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!"
    exit 1
fi

log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ CI/CD
required_files=(
    ".github/workflows/deploy.yml"
    ".github/workflows/test.yml"
    "docker-compose.prod.yml"
    "deploy.sh"
    "setup_server.sh"
    "env.prod.example"
)

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: $file"
        exit 1
    fi
done

success "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!"

echo -e "\n${YELLOW}üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ CI/CD:${NC}"
echo ""
echo "1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:"
echo "   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ setup_server.sh –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
echo "   - –í—ã–ø–æ–ª–Ω–∏—Ç–µ: chmod +x setup_server.sh && ./setup_server.sh"
echo ""
echo "2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Secrets:"
echo "   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Secrets and variables ‚Üí Actions"
echo "   - –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–µ–∫—Ä–µ—Ç—ã:"
echo "     ‚Ä¢ SERVER_HOST - IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞"
echo "     ‚Ä¢ SERVER_USER - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
echo "     ‚Ä¢ SERVER_SSH_KEY - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π SSH –∫–ª—é—á"
echo "     ‚Ä¢ SERVER_PORT - –ø–æ—Ä—Ç SSH (–æ–±—ã—á–Ω–æ 22)"
echo ""
echo "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∫–ª—é—á–µ–π:"
echo "   - –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ SSH –∫–ª—é—á: ssh-keygen -t rsa -b 4096"
echo "   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ssh-copy-id user@server"
echo "   - –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ GitHub Secrets"
echo ""
echo "4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
echo "   - –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ: cp env.prod.example .env.prod"
echo "   - –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env.prod —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
if [ -d ".git" ]; then
    current_branch=$(git branch --show-current)
    log "–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch"
    
    if [ "$current_branch" != "main" ] && [ "$current_branch" != "master" ]; then
        warning "CI/CD –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≤–µ—Ç–æ–∫ main/master. –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    remote_url=$(git remote get-url origin 2>/dev/null || echo "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    log "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $remote_url"
    
    if [[ "$remote_url" == *"github.com"* ]]; then
        success "GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
    else
        warning "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ GitHub"
    fi
else
    warning "–≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ Git –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫ GitHub"
fi

echo ""
echo -e "${YELLOW}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo ""
echo "–õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞:"
echo "  npm run start:dev          # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
echo "  npm run docker:up         # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker"
echo "  npm run docker:logs       # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo ""
echo "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ:"
echo "  ./deploy.sh               # –†—É—á–Ω–æ–π –¥–µ–ø–ª–æ–π"
echo "  ./monitor.sh              # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"
echo "  ./backup.sh               # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
echo ""
echo "GitHub Actions:"
echo "  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –ø—Ä–∏ push –≤ main/master"
echo "  - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PR"
echo "  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ Actions ‚Üí Deploy to Server"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
if command -v docker > /dev/null && command -v docker-compose > /dev/null; then
    success "Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É
    log "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É Docker –æ–±—Ä–∞–∑–∞..."
    if docker build -t auto-parser-test . > /dev/null 2>&1; then
        success "Docker –æ–±—Ä–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ!"
        docker rmi auto-parser-test > /dev/null 2>&1
    else
        warning "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–±–æ—Ä–∫–æ–π Docker –æ–±—Ä–∞–∑–∞"
    fi
else
    warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ Docker Compose"
fi

echo ""
echo -e "${GREEN}‚úÖ CI/CD –≥–æ—Ç–æ–≤ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ!${NC}"
echo ""
echo -e "${BLUE}üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC}"
echo "  - CICD_README.md - –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"
echo "  - SOURCES_README.md - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"
echo ""
echo -e "${YELLOW}üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é setup_server.sh"
echo "2. –î–æ–±–∞–≤—å—Ç–µ GitHub Secrets"
echo "3. –°–¥–µ–ª–∞–π—Ç–µ push –≤ main –≤–µ—Ç–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ø–ª–æ—è"
echo ""
echo -e "${GREEN}–£–¥–∞—á–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π CI/CD! üéâ${NC}"
