version: '3.8'

services:
  db:
    image: bitnami/postgresql:15
    container_name: auto_db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-root}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-P@rs3r_S3cR3t!}
      - POSTGRES_DB=${DB_NAME:-auto_db}
      - POSTGRESQL_MAX_CONNECTIONS=10000
      - POSTGRESQL_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    volumes:
      - postgres_data:/bitnami/postgresql
      - ./backups:/backups
    networks:
      - parser_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-root} -d ${DB_NAME:-auto_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  parser:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: car_parser
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-root}:${DB_PASSWORD:-P@rs3r_S3cR3t!}@db:5432/${DB_NAME:-auto_db}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-auto_db}
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-P@rs3r_S3cR3t!}
      - MEMORY_LIMIT=512
    networks:
      - parser_network
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - /app/node_modules
    command: ["npm", "run", "start:prod"]
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Опциональный сервис для мониторинга
  monitoring:
    image: prom/prometheus:latest
    container_name: parser_monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - parser_network
    profiles:
      - monitoring

networks:
  parser_network:
    driver: bridge
    name: parser_network

volumes:
  postgres_data:
    name: postgres_data
  prometheus_data:
    name: prometheus_data
