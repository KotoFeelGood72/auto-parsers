/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤ —Ü–∏–∫–ª–∏—á–Ω–æ
 */

const { ParserManager } = require('./src/parsers/ParserManager');

async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä—Å–µ—Ä–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...');
    
    const manager = new ParserManager();
    
    try {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        manager.registerModules();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        const initialized = await manager.initializeAll();
        
        if (!initialized) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è');
            process.exit(1);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        console.log('\nüìä –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π:');
        const status = manager.getStatus();
        status.modules.forEach((module, index) => {
            const statusIcon = module.initialized ? '‚úÖ' : '‚ùå';
            console.log(`   ${statusIcon} ${module.name}: ${module.initialized ? '–ì–æ—Ç–æ–≤' : '–û—à–∏–±–∫–∞'}`);
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥
        console.log('\nüîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...');
        console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
        
        await manager.startCyclicParsing();
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = { main };
