const fs = require('fs');
const path = require('path');

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª–µ–π –ø–∞—Ä—Å–µ—Ä–æ–≤
 */
class ParserModuleManager {
    constructor() {
        this.modulesPath = path.join(__dirname, 'modules');
        this.modules = new Map();
        this.currentModuleIndex = 0;
        this.loadModules();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
     */
    loadModules() {
        try {
            const moduleDirs = fs.readdirSync(this.modulesPath, { withFileTypes: true })
                .filter(dirent => dirent.isDirectory())
                .map(dirent => dirent.name);

            console.log(`üîç –ù–∞–π–¥–µ–Ω—ã –º–æ–¥—É–ª–∏: ${moduleDirs.join(', ')}`);

            for (const moduleName of moduleDirs) {
                try {
                    const modulePath = path.join(this.modulesPath, moduleName, 'index.js');
                    if (fs.existsSync(modulePath)) {
                        const ModuleClass = require(modulePath);
                        const moduleInstance = new ModuleClass[Object.keys(ModuleClass)[0]]();
                        this.modules.set(moduleName, moduleInstance);
                        console.log(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –∑–∞–≥—Ä—É–∂–µ–Ω`);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}:`, error.message);
                }
            }

            console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: ${this.modules.size}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:', error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    getModules() {
        return Array.from(this.modules.keys());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ –∏–º–µ–Ω–∏
     */
    getModule(name) {
        return this.modules.get(name);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è –≤ —Ü–∏–∫–ª–µ
     */
    getNextModule() {
        const moduleNames = Array.from(this.modules.keys());
        if (moduleNames.length === 0) {
            return null;
        }

        const module = this.modules.get(moduleNames[this.currentModuleIndex]);
        this.currentModuleIndex = (this.currentModuleIndex + 1) % moduleNames.length;
        return module;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
     */
    getCurrentModule() {
        const moduleNames = Array.from(this.modules.keys());
        if (moduleNames.length === 0) {
            return null;
        }
        return this.modules.get(moduleNames[this.currentModuleIndex]);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
     */
    async checkAvailability() {
        const results = {};
        for (const [name, module] of this.modules) {
            try {
                results[name] = await module.isAvailable();
            } catch (error) {
                results[name] = false;
                console.warn(`‚ö†Ô∏è –ú–æ–¥—É–ª—å ${name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
            }
        }
        return results;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö
     */
    getModulesInfo() {
        const info = {};
        for (const [name, module] of this.modules) {
            try {
                info[name] = module.getInfo();
            } catch (error) {
                info[name] = { name, error: error.message };
            }
        }
        return info;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–æ–¥—É–ª–µ–π
     */
    async* runCyclicParsing(maxIterations = null) {
        let iteration = 0;
        
        while (maxIterations === null || iteration < maxIterations) {
            const module = this.getNextModule();
            if (!module) {
                console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
                break;
            }

            console.log(`\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è ${iteration + 1}: –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å ${module.name}`);
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
                const isAvailable = await module.isAvailable();
                if (!isAvailable) {
                    console.log(`‚ö†Ô∏è –ú–æ–¥—É–ª—å ${module.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –º–æ–¥—É–ª—è
                if (module.parser && module.context) {
                    await module.parser.initialize(module.context);
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                let count = 0;
                for await (const listingUrl of module.getListings()) {
                    console.log(`\nüîç –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${++count} –∏–∑ –º–æ–¥—É–ª—è ${module.name}: ${listingUrl}`);
                    
                    const data = await module.parseListing(listingUrl);
                    if (data) {
                        yield { module: module.name, data, url: listingUrl };
                    }
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –æ–¥–Ω—É –∏—Ç–µ—Ä–∞—Ü–∏—é
                    if (count >= 3) {
                        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –º–æ–¥—É–ª—è ${module.name}`);
                        break;
                    }
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ ${module.name}:`, error.message);
            }

            iteration++;
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
            if (maxIterations === null || iteration < maxIterations) {
                console.log('‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏...');
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
    }
}

module.exports = { ParserModuleManager };
