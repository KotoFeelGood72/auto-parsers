const { configLoader } = require('./ConfigLoader');
const { startBrowser, logMemoryUsage, forceGarbageCollection } = require('../utils/browser');
const { MemoryManager } = require('../utils/memoryManager');
const { saveData } = require('../utils/saveData');
const { databaseManager } = require('../database/database');

/**
 * –°–∏—Å—Ç–µ–º–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
 */
class ParserRunner {
    constructor() {
        this.isRunning = false;
        this.currentParser = null;
        this.browser = null;
        this.context = null;
        this.memoryManager = null;
        this.parserQueue = [];
        this.parserStats = new Map();
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
     * @param {Array<string>} parserNames - –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
     * @param {Object} globalConfig - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     */
    async startCycling(parserNames = [], globalConfig = {}) {
        if (this.isRunning) {
            console.log("‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä—Å–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        if (parserNames.length === 0) {
            parserNames = configLoader.getAvailableConfigs();
        }

        if (parserNames.length === 0) {
            console.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞");
            return;
        }

        this.isRunning = true;
        this.parserQueue = [...parserNames];
        
        console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤: ${parserNames.join(', ')}`);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try {
            await databaseManager.initialize();
        } catch (error) {
            console.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã");
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
        try {
            const browserData = await startBrowser();
            this.browser = browserData.browser;
            this.context = browserData.context;
        } catch (error) {
            console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä:", error);
            this.isRunning = false;
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏
        this.memoryManager = new MemoryManager();
        this.memoryManager.setConfig({
            memoryCheckInterval: 3,
            forceCleanupInterval: 10,
            maxMemoryMB: 512,
            cleanupThreshold: 0.7
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
        await this.runCycle(globalConfig);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async runCycle(globalConfig = {}) {
        let cycleCount = 0;

        while (this.isRunning) {
            cycleCount++;
            console.log(`üîÑ –¶–∏–∫–ª ${cycleCount}`);

            for (const parserName of this.parserQueue) {
                if (!this.isRunning) break;

                try {
                    await this.runParser(parserName, globalConfig);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ ${parserName}: ${error.message}`);
                }

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—Ä—Å–µ—Ä–∞–º–∏
                if (this.isRunning) {
                    await this.delay(5000);
                }
            }

            // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
            if (this.isRunning) {
                forceGarbageCollection();
            }
        }

        console.log("‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
     */
    async runParser(parserName, globalConfig = {}) {
        console.log(`üéØ ${parserName}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–∞
        if (!configLoader.getAvailableConfigs().includes(parserName)) {
            console.error(`‚ùå –ü–∞—Ä—Å–µ—Ä ${parserName} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        const parser = configLoader.createParser(parserName, globalConfig);
        this.currentParser = parser;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        await parser.initialize(this.context);

        let processedCount = 0;

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            for await (const link of parser.getListings()) {
                if (!this.isRunning) break;

                try {
                    const rawData = await parser.parseListing(link);
                    if (rawData && parser.validateData(rawData)) {
                        const normalizedData = parser.normalizeData(rawData);
                        await saveData(normalizedData);
                        processedCount++;
                        this.memoryManager.increment();

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                        await this.memoryManager.checkAndCleanup();
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞
            this.updateParserStats(parserName, processedCount);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${parserName}: ${error.message}`);
        } finally {
            // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–∞—Ä—Å–µ—Ä–∞
            try {
                await parser.cleanup();
            } catch (cleanupError) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", cleanupError.message);
            }
        }

        console.log(`‚úÖ ${parserName}: ${processedCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
     */
    updateParserStats(parserName, processedCount) {
        const currentStats = this.parserStats.get(parserName) || {
            totalProcessed: 0,
            lastRun: null,
            runs: 0
        };

        currentStats.totalProcessed += processedCount;
        currentStats.lastRun = new Date();
        currentStats.runs++;

        this.parserStats.set(parserName, currentStats);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async stop() {
        console.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...");
        this.isRunning = false;

        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        if (this.currentParser) {
            try {
                await this.currentParser.cleanup();
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞:", error.message);
            }
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if (this.context) {
            try {
                await this.context.close();
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:", error.message);
            }
        }

        if (this.browser) {
            try {
                await this.browser.close();
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:", error.message);
            }
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        forceGarbageCollection();

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.printStats();
    }

    /**
     * –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤
     */
    printStats() {
        console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        
        for (const [parserName, stats] of this.parserStats) {
            console.log(`   ${parserName}: ${stats.totalProcessed} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
        }

        const totalProcessed = Array.from(this.parserStats.values())
            .reduce((sum, stats) => sum + stats.totalProcessed, 0);
        
        console.log(`   –í—Å–µ–≥–æ: ${totalProcessed} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            isRunning: this.isRunning,
            currentParser: this.currentParser?.name || null,
            parserQueue: [...this.parserQueue],
            parserStats: Object.fromEntries(this.parserStats),
            memoryStats: this.memoryManager?.getMemoryStats() || null
        };
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å
     */
    addParser(parserName) {
        if (!this.parserQueue.includes(parserName)) {
            this.parserQueue.push(parserName);
            console.log(`‚úÖ –ü–∞—Ä—Å–µ—Ä ${parserName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å`);
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     */
    removeParser(parserName) {
        const index = this.parserQueue.indexOf(parserName);
        if (index > -1) {
            this.parserQueue.splice(index, 1);
            console.log(`‚úÖ –ü–∞—Ä—Å–µ—Ä ${parserName} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
        }
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    async delay(ms) {
        await new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞–Ω–Ω–µ—Ä–∞
const parserRunner = new ParserRunner();

module.exports = { ParserRunner, parserRunner };
