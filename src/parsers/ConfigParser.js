const { BaseParser } = require('./BaseParser');

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä—ã –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞–≤ —Å–∞–π—Ç –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
 */
class ConfigParser extends BaseParser {
    constructor(config = {}) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        const { 
            name,
            baseUrl,
            listingsUrl,
            selectors,
            fieldMapping,
            dataMapping,
            ...baseConfig 
        } = config;

        super(name, baseConfig);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.parsingConfig = {
            baseUrl: baseUrl || '',
            listingsUrl: listingsUrl || '',
            selectors: selectors || {},
            fieldMapping: config.fieldMapping || {},
            dataMapping: dataMapping || {}
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async createPage() {
        if (!this.context) {
            throw new Error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        return await this.context.newPage();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async* getListings() {
        let attempt = 0;
        let currentPage = 1;
        const maxPages = this.config.maxPages || 50;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log(`üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ ${this.name}...`);

                while (currentPage <= maxPages) {
                    const url = this.buildListingsUrl(currentPage);
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: this.config.timeout || 60000 
                    });

                    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    const listingSelector = this.parsingConfig.selectors.listing || 'a[href*="/"]';
                    console.log(`üîç –ñ–¥–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: ${listingSelector}`);
                    
                    await page.waitForSelector(listingSelector, { timeout: 10000 });

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const links = await page.$$eval(listingSelector, elements => 
                        elements.map(el => el.href).filter(href => href && href.includes('/'))
                    );

                    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${links.length}`);

                    if (links.length === 0) {
                        console.log(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                        break;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${links.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏
                    for (const link of links) {
                        yield link;
                    }

                    currentPage++;
                    await this.delay();
                }

                break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}:`, error.message);
                attempt++;
                
                if (attempt < this.config.maxRetries) {
                    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.maxRetries}...`);
                    await this.delay(5000);
                }
            } finally {
                await page.close();
            }
        }

        if (attempt >= this.config.maxRetries) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ ${this.config.maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
     */
    buildListingsUrl(page) {
        const urlTemplate = this.parsingConfig.listingsUrl;
        return urlTemplate.replace('{page}', page);
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
     */
    async parseListing(url) {
        const page = await this.createPage();
        
        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);
            
            await page.goto(url, { 
                waitUntil: "domcontentloaded", 
                timeout: this.config.timeout || 60000 
            });

            console.log(`‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`);
            await page.waitForTimeout(2000);

            console.log(`üìÑ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...`);
            const rawData = await this.extractListingData(page, url);
            
            console.log(`üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.`);
            return rawData;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${url}:`, error.message);
            return null;
        } finally {
            await page.close();
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è
     */
    async extractListingData(page, url) {
        const rawData = {
            short_url: url,
            title: null,
            make: null,
            model: null,
            year: null,
            body_type: null,
            horsepower: null,
            fuel_type: null,
            motors_trim: null,
            kilometers: null,
            price_formatted: null,
            price_raw: null,
            exterior_color: null,
            location: null,
            phone: null,
            seller_name: null,
            seller_type: null,
            seller_logo: null,
            seller_profile_link: null,
            photos: []
        };

        const selectors = this.parsingConfig.selectors;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        for (const [field, selector] of Object.entries(selectors)) {
            if (field === 'listing' || field === 'specs' || field === 'price') continue;
            
            try {
                const value = await this.extractField(page, selector);
                rawData[field] = value;
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ${field}:`, error.message);
            }
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
        if (selectors.price) {
            try {
                const priceResult = await this.extractPrice(page, selectors.price);
                rawData.price_formatted = priceResult;
                rawData.price_raw = this.parsePriceToNumber(priceResult);
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É:`, error.message);
            }
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ specs
        if (selectors.specs) {
            try {
                const specsData = await this.extractSpecs(page, selectors.specs);
                Object.assign(rawData, specsData);
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:`, error.message);
            }
        }

        return rawData;
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
     */
    async extractString(page, selector, options = {}) {
        const {
            attribute = null,
            index = 0,
            fallback = null,
            regex = null
        } = options;

        try {
            if (Array.isArray(selector)) {
                // –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä - –º–∞—Å—Å–∏–≤, –ø—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π
                for (const sel of selector) {
                    const result = await this.extractString(page, sel, options);
                    if (result) return result;
                }
                return fallback;
            }

            if (typeof selector === 'object') {
                // –ï—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä - –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
                const { selector: sel, attribute: attr, index: idx, fallback: fb } = selector;
                return await this.extractString(page, sel, { attribute: attr, index: idx, fallback: fb });
            }

            // –û–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            const elements = await page.$$(selector);
            if (elements.length === 0) return fallback;

            const element = elements[index] || elements[0];
            let value;

            if (attribute) {
                value = await element.getAttribute(attribute);
            } else {
                value = await element.textContent();
            }

            if (!value) return fallback;

            // –ü—Ä–∏–º–µ–Ω—è–µ–º regex –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (regex) {
                const match = value.match(regex);
                return match ? match[1] || match[0] : fallback;
            }

            return value.trim();

        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}:`, error.message);
            return fallback;
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—è
     */
    async extractField(page, spec) {
        if (typeof spec === 'string') {
            return await this.extractString(page, spec);
        }

        if (Array.isArray(spec)) {
            // –ú–∞—Å—Å–∏–≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ - –ø—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π
            for (const selector of spec) {
                const result = await this.extractString(page, selector);
                if (result) return result;
            }
            return null;
        }

        if (typeof spec === 'object') {
            // –û–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            const { selector, attribute, index, fallback, regex } = spec;
            return await this.extractString(page, selector, { attribute, index, fallback, regex });
        }

        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
     */
    async extractPrice(page, priceConfig) {
        console.log(`üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:`, JSON.stringify(priceConfig, null, 2));

        if (Array.isArray(priceConfig)) {
            // –ú–∞—Å—Å–∏–≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Ü–µ–Ω—ã
            for (const selector of priceConfig) {
                try {
                    console.log(`üîç –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
                    const price = await this.extractString(page, selector);
                    if (price && price !== '0' && price !== '$0') {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: ${price}`);
                        return price;
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
                }
            }
        } else if (typeof priceConfig === 'string') {
            // –ü—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            const price = await this.extractString(page, priceConfig);
            if (price && price !== '0' && price !== '$0') {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: ${price}`);
                return price;
            }
        } else if (typeof priceConfig === 'object') {
            // –û–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            const { selector, attribute, fallback } = priceConfig;
            const price = await this.extractString(page, selector, { attribute, fallback });
            if (price && price !== '0' && price !== '$0') {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: ${price}`);
                return price;
            }
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        console.log(`üîç –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–µ–Ω—ã...`);
        
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–∞–ª—é—Ç–æ–π
        const currencySelectors = [
            '[class*="price"]',
            '[class*="cost"]',
            '[class*="amount"]',
            '.price',
            '.cost',
            '.amount',
            '[data-price]'
        ];

        for (const selector of currencySelectors) {
            try {
                const elements = await page.$$(selector);
                for (const element of elements) {
                    const text = await element.textContent();
                    if (text && /[\d,]+/.test(text) && (text.includes('$') || text.includes('AED') || text.includes('USD'))) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º: ${text}`);
                        return text.trim();
                    }
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
        }

        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try {
            const pageText = await page.textContent('body');
            const priceMatch = pageText.match(/(\$[\d,]+|AED\s*[\d,]+|USD\s*[\d,]+)/);
            if (priceMatch) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${priceMatch[0]}`);
                return priceMatch[0];
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        }

        console.log(`‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return null;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ
     */
    parsePriceToNumber(priceString) {
        if (!priceString) return 0;
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –∑–∞–ø—è—Ç—ã—Ö
        const cleanPrice = priceString.replace(/[^\d,]/g, '');
        
        // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É (–¥–ª—è —Ç—ã—Å—è—á)
        const numericPrice = cleanPrice.replace(/,/g, '');
        
        return parseInt(numericPrice) || 0;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
     */
    async extractSpecs(page, specsConfig) {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º specs:`, Object.keys(specsConfig));
        
        const specsData = {};

        for (const [field, config] of Object.entries(specsConfig)) {
            try {
                if (config.label) {
                    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ –ª–µ–π–±–ª—É
                    const value = await this.extractSpecByLabel(page, config.label, config.selector);
                    specsData[field] = config.type === 'number' ? this.parseNumber(value) : value;
                    console.log(`‚úÖ ${field}: ${specsData[field]}`);
                } else {
                    // –û–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—è
                    const value = await this.extractField(page, config);
                    specsData[field] = config.type === 'number' ? this.parseNumber(value) : value;
                    console.log(`‚úÖ ${field}: ${specsData[field]}`);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ${field}:`, error.message);
                specsData[field] = null;
            }
        }

        return specsData;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ª–µ–π–±–ª—É
     */
    async extractSpecByLabel(page, labelText, customSelector = null) {
        console.log(`üîç –ò–∑–≤–ª–µ–∫–∞–µ–º ${labelText} –ø–æ –ª–µ–π–±–ª—É`);
        
        const selectors = customSelector ? [customSelector] : [
            '#specifications-container ul li',
            '.specs ul li',
            '.specifications ul li',
            '.details ul li',
            'ul li',
            'li'
        ];

        console.log(`üîç –ò—â–µ–º "${labelText}" –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö:`, selectors);

        for (const selector of selectors) {
            try {
                const elements = await page.$$(selector);
                
                for (const element of elements) {
                    const text = await element.textContent();
                    if (text && text.toLowerCase().includes(labelText.toLowerCase())) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ª–µ–π–±–ª–∞
                        const parts = text.split(':');
                        if (parts.length > 1) {
                            const value = parts[1].trim();
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è "${labelText}": "${value}"`);
                            return value;
                        }
                        
                        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏—â–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ª–µ–π–±–ª–∞
                        const match = text.match(new RegExp(`${labelText}[\\s:]*([^\\n]+)`, 'i'));
                        if (match) {
                            const value = match[1].trim();
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è "${labelText}": "${value}"`);
                            return value;
                        }
                    }
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ ${selector}:`, error.message);
            }
        }

        console.log(`‚ùå –õ–µ–π–±–ª "${labelText}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–µ`);
        return null;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–∞
     */
    parseNumber(value) {
        if (!value) return null;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        const numericValue = value.toString().replace(/[^\d]/g, '');
        return numericValue ? parseInt(numericValue) : null;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π
     */
    applyFieldMapping(rawData, fieldMapping) {
        const mappedData = { ...rawData };
        
        for (const [sourceField, targetField] of Object.entries(fieldMapping)) {
            if (rawData[sourceField] !== undefined) {
                mappedData[targetField] = rawData[sourceField];
                delete mappedData[sourceField];
            }
        }
        
        return mappedData;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    validateData(data) {
        return data && data.short_url && data.title;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    normalizeData(rawData) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        const mappedData = this.parsingConfig.fieldMapping ? 
            this.applyFieldMapping(rawData, this.parsingConfig.fieldMapping) : 
            rawData;

        return {
            short_url: mappedData.short_url || null,
            title: mappedData.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            make: mappedData.make || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            model: mappedData.model || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            year: mappedData.year || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            body_type: mappedData.body_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            horsepower: mappedData.horsepower || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            fuel_type: mappedData.fuel_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            motors_trim: mappedData.motors_trim || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            kilometers: parseInt(mappedData.kilometers, 10) || 0,
            price_formatted: mappedData.price_formatted || "0",
            price_raw: mappedData.price_raw || 0,
            currency: mappedData.currency || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            exterior_color: mappedData.exterior_color || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            location: mappedData.location || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            phone: mappedData.phone || "–ù–µ —É–∫–∞–∑–∞–Ω",
            seller_name: mappedData.seller_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            seller_type: mappedData.seller_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            seller_logo: mappedData.seller_logo || null,
            seller_profile_link: mappedData.seller_profile_link || null,
            photos: mappedData.photos || []
        };
    }
}

module.exports = { ConfigParser };