const { BaseParser } = require('./BaseParser');

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä—ã –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞–≤ —Å–∞–π—Ç –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
 */
class ConfigParser extends BaseParser {
    constructor(config = {}) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        const { 
            name,
            baseUrl,
            listingsUrl,
            selectors,
            fieldMapping,
            dataMapping,
            ...baseConfig 
        } = config;

        super(name, baseConfig);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.parsingConfig = {
            baseUrl: baseUrl || '',
            listingsUrl: listingsUrl || '',
            selectors: selectors || {},
            fieldMapping: config.fieldMapping || {},
            dataMapping: dataMapping || {}
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async createPage() {
        if (!this.context) {
            throw new Error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        return await this.context.newPage();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async* getListings() {
        let attempt = 0;
        let currentPage = 1;
        const maxPages = this.config.maxPages || 50;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log(`üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ ${this.name}...`);

                while (currentPage <= maxPages) {
                    const url = this.buildListingsUrl(currentPage);
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: this.config.timeout 
                    });

                    // –ñ–¥—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    const listingsSelector = this.parsingConfig.selectors.listings?.container;
                    if (listingsSelector) {
                        console.log(`üîç –ñ–¥–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: ${listingsSelector}`);
                        await page.waitForSelector(listingsSelector, { timeout: 30000 });
                        // –î–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
                        await new Promise(r => setTimeout(r, 500));
                    }

                    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const carLinks = await this.extractListings(page);
                    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: ${carLinks.length}`);

                    if (carLinks.length === 0) {
                        console.log(`üèÅ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º.`);
                        break;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

                    for (const link of carLinks) {
                        yield link;
                        await this.delay();
                    }

                    console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${currentPage + 1}`);
                    currentPage++;
                }

                return;

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
                attempt++;
                console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            } finally {
                await page.close();
                console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
            }
        }

        console.error("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async parseListing(url) {
        const page = await this.createPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

            await page.goto(url, { 
                waitUntil: "domcontentloaded", 
                timeout: this.config.timeout 
            });

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const titleSelector = this.parsingConfig.selectors.details?.title;
            if (titleSelector) {
                console.log("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
                await page.waitForSelector(titleSelector, { timeout: 15000 });
            }

            console.log("üìÑ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...");

            // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const rawData = await this.extractListingData(page, url);

            console.log(rawData);
            return rawData;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}:`, error);
            return null;
        } finally {
            await page.close();
            console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    buildListingsUrl(page) {
        const { listingsUrl } = this.parsingConfig;
        if (listingsUrl.includes('{page}')) {
            return listingsUrl.replace('{page}', page);
        }
        return `${listingsUrl}?page=${page}`;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async extractListings(page) {
        const { selectors } = this.parsingConfig;
        const { container, link } = selectors.listings || {};

        if (!container || !link) {
            console.warn("‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
            return [];
        }

        try {
            return await page.$$eval(container, (elements, params) => {
                const { linkSelector, baseUrl } = params;
                return elements
                    .map(el => {
                        const linkEl = el.querySelector(linkSelector);
                        if (!linkEl) return null;
                        
                        const href = linkEl.getAttribute("href");
                        if (!href) return null;
                        
                        // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è, –¥–µ–ª–∞–µ–º –µ—ë –∞–±—Å–æ–ª—é—Ç–Ω–æ–π
                        if (href.startsWith('/')) {
                            return baseUrl + href;
                        } else if (href.startsWith('http')) {
                            return href;
                        } else {
                            return baseUrl + '/' + href;
                        }
                    })
                    .filter(href => href);
            }, { linkSelector: link, baseUrl: this.parsingConfig.baseUrl });
        } catch (error) {
            console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", error.message);
            return [];
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async extractListingData(page, url) {
        const { selectors, fieldMapping } = this.parsingConfig;
        const details = selectors.details || {};

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const rawData = {
            short_url: url,
            title: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            make: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            model: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", 
            year: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            body_type: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            horsepower: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            fuel_type: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            motors_trim: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            kilometers: 0,
            price_formatted: "0",
            price_raw: 0,
            exterior_color: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            location: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            phone: "–ù–µ —É–∫–∞–∑–∞–Ω",
            seller_name: "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            seller_type: "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            seller_logo: null,
            seller_profile_link: null,
            photos: []
        };

        // –ü–∞—Ä—Å–∏–º –≤—Å–µ –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for (const [field, selector] of Object.entries(details)) {
            if (field === 'photos') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                rawData[field] = await this.extractPhotos(page, selector);
            } else if (field === 'price') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ü–µ–Ω—ã - —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ formatted –∏ raw
                const priceValue = await this.extractPrice(page, selector);
                rawData.price_formatted = priceValue;
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                const priceMatch = priceValue.match(/(\d+[\d,]*)/);
                if (priceMatch) {
                    rawData.price_raw = parseFloat(priceMatch[1].replace(/,/g, ''));
                } else {
                    rawData.price_raw = 0;
                }
            } else if (field === 'specs' && selector && typeof selector === 'object') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è specs - –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                console.log("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º specs:", Object.keys(selector));
                for (const [specField, specConfig] of Object.entries(selector)) {
                    if (typeof specConfig === 'string') {
                        // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏—â–µ–º –ø–æ –ª–µ–π–±–ª—É –≤ —Å–ø–∏—Å–∫–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
                        rawData[specField] = await this.extractSpecByLabel(page, specConfig);
                    } else if (typeof specConfig === 'object') {
                        // –û–±—ä–µ–∫—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ label –¥–ª—è extractSpecByLabel
                        if (specConfig.label) {
                            console.log(`üîç –ò–∑–≤–ª–µ–∫–∞–µ–º ${specField} –ø–æ –ª–µ–π–±–ª—É "${specConfig.label}"`);
                            rawData[specField] = await this.extractSpecByLabel(page, specConfig.label, specConfig.selector);
                        } else {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å
                            rawData[specField] = await this.extractField(page, specConfig);
                        }
                        
                        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
                        if (specConfig.type === 'number' && rawData[specField]) {
                            const numValue = parseFloat(String(rawData[specField]).replace(/[^\d.,-]/g, '').replace(/,/g, ''));
                            if (!isNaN(numValue)) {
                                rawData[specField] = numValue;
                            }
                        }
                        
                        console.log(`‚úÖ ${specField}: ${rawData[specField]}`);
                    }
                }
            } else if (field === 'kilometers') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–±–µ–≥–∞ (—á–∏—Å–ª–æ)
                const kmValue = await this.extractField(page, selector);
                if (kmValue && !isNaN(parseFloat(kmValue))) {
                    rawData[field] = parseInt(kmValue) || 0;
                }
            } else if (field === 'horsepower') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–æ—â–Ω–æ—Å—Ç–∏ (—á–∏—Å–ª–æ)
                const hpValue = await this.extractField(page, selector);
                if (hpValue && !isNaN(parseFloat(hpValue))) {
                    rawData[field] = parseInt(hpValue) || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                } else {
                    rawData[field] = hpValue || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                }
            } else {
                // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                const value = await this.extractField(page, selector);
                if (value !== null && value !== undefined) {
                    rawData[field] = value;
                }
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (fieldMapping) {
            return this.applyFieldMapping(rawData, fieldMapping);
        }

        return rawData;
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
     */
    async extractString(page, selector, options = {}) {
        const {
            attr = null, // null –æ–∑–Ω–∞—á–∞–µ—Ç textContent
            index = 0,
            fallback = null,
            regex = null
        } = options;

        if (!selector) {
            return fallback;
        }

        try {
            const result = await page.$$eval(selector, (elements, params) => {
                const { attr, index, regex } = params;
                
                if (!elements || elements.length === 0) {
                    return null;
                }

                const element = elements[index] || elements[0];
                if (!element) {
                    return null;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                let value = attr ? 
                    (element.getAttribute(attr) || '') : 
                    (element.textContent || '');

                value = value.trim();

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
                if (regex && value) {
                    const match = value.match(regex);
                    if (match) {
                        value = match[1] || match[0];
                    }
                }

                return value || null;
            }, { attr, index, regex });

            return result || fallback;
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É "${selector}":`, error.message);
            return fallback;
        }
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å –ø–æ–ª—è
     */
    async extractField(page, spec) {
        // –§–æ–ª–ª–±—ç–∫–∏: –º–∞—Å—Å–∏–≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
        if (Array.isArray(spec)) {
            for (const s of spec) {
                const val = await this.extractField(page, s);
                if (val !== null && val !== undefined && String(val).trim() !== '') return val;
            }
            return null;
        }

        // –ü—Ä–æ—Å—Ç–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏
        if (typeof spec === 'string') {
            return await this.extractString(page, spec);
        }

        // –û–±—ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞
        if (spec && typeof spec === 'object') {
            const selector = spec.selector || spec.sel;
            const attr = spec.attr;
            const index = Number.isInteger(spec.index) ? spec.index : 0;
            const type = spec.type;
            const regex = spec.regex ? new RegExp(spec.regex, spec.regexFlags || 'g') : null;
            const fallback = spec.fallback;
            const transform = spec.transform;

            if (!selector) return fallback || null;

            // –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º extractString
            if (type !== 'html' && !transform) {
                const value = await this.extractString(page, selector, {
                    attr,
                    index,
                    regex,
                    fallback
                });
                
                if (type === 'number' && value) {
                    const n = parseFloat(String(value).replace(/[^\d.,-]/g, '').replace(/,/g, ''));
                    return Number.isFinite(n) ? n : (fallback || null);
                }
                
                return value;
            }

            // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            try {
                const value = await page.$$eval(selector, (els, params) => {
                    const { attr, index, regex } = params;
                    const getVal = el => {
                        let v = attr ? (el.getAttribute(attr) || '') : (el.textContent || '');
                        v = v.trim();
                        if (regex) {
                            const m = v.match(regex);
                            if (m && m.length > 0) {
                                v = m[1] || m[0];
                            }
                        }
                        return v;
                    };

                    if (!els || els.length === 0) return null;
                    if (Number.isInteger(index)) {
                        const el = els[index];
                        return el ? getVal(el) : null;
                    }
                    // –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π
                    for (const el of els) {
                        const v = getVal(el);
                        if (v) return v;
                    }
                    return null;
                }, { attr, index, regex: spec.regex ? spec.regex : null, regexFlags: spec.regexFlags });

                if (value == null) return fallback || null;

                let result = value;

                if (type === 'number') {
                    const n = parseFloat(String(value).replace(/[^\d.,-]/g, '').replace(/,/g, ''));
                    result = Number.isFinite(n) ? n : (fallback || null);
                } else if (type === 'html') {
                    try {
                        result = await page.$eval(selector, el => el.innerHTML);
                    } catch (_) {
                        result = fallback || null;
                    }
                }

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                if (transform && typeof transform === 'function') {
                    try {
                        result = transform(result);
                    } catch (_) {
                        result = fallback || null;
                    }
                }

                return result;
            } catch (_) {
                return fallback || null;
            }
        }

        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –ª–µ–π–±–ª–∞
     */
    async extractSpecByLabel(page, labelText, customSelector = null) {
        try {
            const selectors = customSelector 
                ? [customSelector]
                : [
                    '#specifications-container ul li',
                    '#item-specifications ul li',
                    '.specifications ul li',
                    '.specs ul li',
                    '.faq_data li',
                    '.spec-list li',
                    'ul li',
                    'li'
                ];

            console.log(`üîç –ò—â–µ–º "${labelText}" –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö:`, selectors);

            for (const selector of selectors) {
                try {
                    const result = await page.$$eval(selector, (items, label) => {
                        const searchLabel = String(label).toLowerCase();
                        
                        const item = items.find(el => {
                            const text = (el.innerText || '').toLowerCase();
                            return text.includes(searchLabel);
                        });
                        
                        if (!item) return null;
                        
                        const text = item.innerText || '';
                        const colonIndex = text.indexOf(':');
                        if (colonIndex > -1) {
                            return text.substring(colonIndex + 1).trim();
                        }
                        
                        const spans = Array.from(item.querySelectorAll('span'));
                        if (spans.length > 1) {
                            const valueEl = spans[spans.length - 1];
                            return valueEl ? valueEl.textContent.trim() : null;
                        }
                        
                        const divs = Array.from(item.querySelectorAll('div'));
                        if (divs.length > 1) {
                            const valueEl = divs[divs.length - 1];
                            return valueEl ? valueEl.textContent.trim() : null;
                        }
                        
                        return text.trim();
                    }, labelText);
                    
                    if (result && result.trim() !== '') {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è "${labelText}": "${result}"`);
                        return result;
                    }
                } catch (error) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}:`, error.message);
                    continue;
                }
            }
            
            console.log(`‚ùå –õ–µ–π–±–ª "${labelText}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–µ`);
            return null;
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ extractSpecByLabel:`, error.message);
            return null;
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    async extractPhotos(page, photoConfig) {
        if (!photoConfig || !photoConfig.selector) return [];

        try {
            return await page.$$eval(photoConfig.selector, (imgs, params) => {
                const { attr } = params;
                return imgs.map(img => {
                    const src = attr ? img.getAttribute(attr) : img.src;
                    return src && src.startsWith('//') ? 'https:' + src : src;
                }).filter(src => src);
            }, { attr: photoConfig.attr });
        } catch (error) {
            console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", error.message);
            return [];
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—è
     */
    async extractPrice(page, priceConfig) {
        if (!priceConfig) return "0";

        console.log("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:", priceConfig);

        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤, –ø—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ –æ—á–µ—Ä–µ–¥–∏
        if (Array.isArray(priceConfig)) {
            for (const selector of priceConfig) {
                try {
                    console.log(`üîç –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector}`);
                    const priceValue = await this.extractString(page, selector);
                    if (priceValue && priceValue.trim() !== "" && priceValue !== "0") {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: ${priceValue}`);
                        return priceValue.trim();
                    }
                } catch (error) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}:`, error.message);
                }
            }
        } else if (typeof priceConfig === 'object' && priceConfig.selector) {
            // –û–±—ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
            try {
                console.log(`üîç –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –æ–±—ä–µ–∫—Ç–∞: ${priceConfig.selector}`);
                const priceValue = await this.extractString(page, priceConfig.selector);
                if (priceValue && priceValue.trim() !== "" && priceValue !== "0") {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: ${priceValue}`);
                    return priceValue.trim();
                }
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${priceConfig.selector}:`, error.message);
            }
        } else if (typeof priceConfig === 'string') {
            // –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            try {
                console.log(`üîç –ü—Ä–æ–±—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: ${priceConfig}`);
                const priceValue = await this.extractString(page, priceConfig);
                if (priceValue && priceValue.trim() !== "" && priceValue !== "0") {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: ${priceValue}`);
                    return priceValue.trim();
                }
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${priceConfig}:`, error.message);
            }
        }

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ü–µ–Ω—ã
        console.log("üîç –û—Ç–ª–∞–¥–∫–∞ —Ü–µ–Ω—ã - –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:");
        try {
            const allElements = await page.$$eval('*', elements => elements.length);
            console.log(`üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${allElements}`);
            
            const priceElements = await page.$$eval('*', elements => {
                return elements
                    .filter(el => {
                        const text = el.textContent || '';
                        const hasPrice = /(USD|AED|\$|‚Ç¨|¬£)\s*[\d,]+|[\d,]+.*(USD|AED|\$|‚Ç¨|¬£)/i.test(text);
                        return hasPrice && text.length < 200 && text.length > 3;
                    })
                    .map(el => ({
                        tag: el.tagName,
                        class: el.className,
                        id: el.id,
                        text: el.textContent.trim().substring(0, 100)
                    }))
                    .slice(0, 15);
            });
            console.log("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–µ–Ω–æ–π:", priceElements);
            
            if (priceElements && priceElements.length > 0) {
                for (const element of priceElements) {
                    const priceMatch = element.text.match(/(\d+[\d,]*)\s*(USD|AED|\$|‚Ç¨|¬£)/i);
                    if (priceMatch) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ: ${priceMatch[0]}`);
                        return priceMatch[0].trim();
                    }
                }
            }
            
            const numberElements = await page.$$eval('*', elements => {
                return elements
                    .filter(el => {
                        const text = el.textContent || '';
                        const hasNumbers = /\d+[\d,]*/.test(text);
                        return hasNumbers && text.length < 100 && text.length > 2;
                    })
                    .map(el => ({
                        tag: el.tagName,
                        class: el.className,
                        id: el.id,
                        text: el.textContent.trim().substring(0, 50)
                    }))
                    .slice(0, 10);
            });
            console.log("–≠–ª–µ–º–µ–Ω—Ç—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏:", numberElements);
            
            if (numberElements && numberElements.length > 0) {
                console.log("üîç –ò—â–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ü–µ–Ω—ã...");
                for (const element of numberElements) {
                    const numbers = element.text.match(/\d+[\d,]*/g);
                    if (numbers) {
                        for (const num of numbers) {
                            const numValue = parseInt(num.replace(/,/g, ''));
                            if (numValue > 1000) {
                                console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ: ${num} –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${element.tag}.${element.class}`);
                                const currencyMatch = element.text.match(/(USD|AED|\$|‚Ç¨|¬£)/i);
                                if (currencyMatch) {
                                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: ${num} ${currencyMatch[1]}`);
                                    return `${num} ${currencyMatch[1]}`;
                                } else {
                                    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ –±–µ–∑ –≤–∞–ª—é—Ç—ã: ${num}`);
                                    return num;
                                }
                            }
                        }
                    }
                }
            }
            
            let selectors = [];
            if (Array.isArray(priceConfig)) {
                selectors = priceConfig;
            } else if (typeof priceConfig === 'object' && priceConfig.selector) {
                selectors = [priceConfig.selector];
            } else if (typeof priceConfig === 'string') {
                selectors = [priceConfig];
            }
            
            for (const selector of selectors) {
                try {
                    const found = await page.$(selector);
                    if (found) {
                        const text = await found.textContent();
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç ${selector}: "${text}"`);
                    } else {
                        console.log(`‚ùå –≠–ª–µ–º–µ–Ω—Ç ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                } catch (e) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ${selector}:`, e.message);
                }
            }
        } catch (e) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Ü–µ–Ω—ã:", e.message);
        }

        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try {
            console.log("üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∏—Å–∫ —Ü–µ–Ω—ã –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            const pageText = await page.textContent('body');
            const priceMatches = pageText.match(/(\d+[\d,]*)\s*(USD|AED|\$|‚Ç¨|¬£)/gi);
            if (priceMatches && priceMatches.length > 0) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`, priceMatches);
                return priceMatches[0].trim();
            }
            
            const numberMatches = pageText.match(/\d+[\d,]*/g);
            if (numberMatches) {
                for (const num of numberMatches) {
                    const numValue = parseInt(num.replace(/,/g, ''));
                    if (numValue > 1000 && numValue < 10000000) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ü–µ–Ω–∞: ${num}`);
                        return num;
                    }
                }
            }
        } catch (e) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ:", e.message);
        }

        return "0";
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π
     */
    applyFieldMapping(rawData, fieldMapping) {
        if (!fieldMapping || Object.keys(fieldMapping).length === 0) {
            return rawData;
        }

        const mappedData = { ...rawData };

        for (const [sourceField, targetField] of Object.entries(fieldMapping)) {
            if (rawData[sourceField] !== undefined) {
                mappedData[targetField] = rawData[sourceField];
            }
        }

        return mappedData;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    applyDataMapping(rawData) {
        const { dataMapping } = this.parsingConfig;
        
        if (!dataMapping || Object.keys(dataMapping).length === 0) {
            return rawData;
        }

        const mappedData = { ...rawData };

        for (const [targetField, sourceField] of Object.entries(dataMapping)) {
            if (rawData[sourceField] !== undefined) {
                mappedData[targetField] = rawData[sourceField];
            }
        }

        return mappedData;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    validateData(data) {
        const { validation } = this.parsingConfig;
        
        if (!validation) {
            return super.validateData(data);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (validation.required) {
            for (const field of validation.required) {
                if (!data[field] || data[field] === "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
                    return false;
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        if (validation.minPrice && data.price_raw && data.price_raw < validation.minPrice) {
            return false;
        }

        return true;
    }
}

module.exports = { ConfigParser };
