const { BaseParser } = require('./BaseParser');

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä—ã –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞–≤ —Å–∞–π—Ç –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
 */
class ConfigParser extends BaseParser {
    constructor(config = {}) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        const { 
            name,
            baseUrl,
            listingsUrl,
            selectors,
            dataMapping,
            ...baseConfig 
        } = config;

        super(name, baseConfig);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
        this.parsingConfig = {
            baseUrl: baseUrl || '',
            listingsUrl: listingsUrl || '',
            selectors: selectors || {},
            dataMapping: dataMapping || {}
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async* getListings() {
        let attempt = 0;
        let currentPage = 1;
        const maxPages = this.config.maxPages || 50;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log(`üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ ${this.name}...`);

                while (currentPage <= maxPages) {
                    const url = this.buildListingsUrl(currentPage);
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: this.config.timeout 
                    });

                    // –ñ–¥—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    const listingsSelector = this.parsingConfig.selectors.listings?.container;
                    if (listingsSelector) {
                        await page.waitForSelector(listingsSelector, { timeout: 30000 });
                    }

                    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    const carLinks = await this.extractListings(page);

                    if (carLinks.length === 0) {
                        console.log(`üèÅ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º.`);
                        break;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

                    for (const link of carLinks) {
                        yield link;
                        await this.delay();
                    }

                    console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${currentPage + 1}`);
                    currentPage++;
                }

                return;

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
                attempt++;
                console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            } finally {
                await page.close();
                console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
            }
        }

        console.error("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async parseListing(url) {
        const page = await this.createPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

            await page.goto(url, { 
                waitUntil: "domcontentloaded", 
                timeout: this.config.timeout 
            });

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const titleSelector = this.parsingConfig.selectors.details?.title;
            if (titleSelector) {
                console.log("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
                await page.waitForSelector(titleSelector, { timeout: 15000 });
            }

            console.log("üìÑ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...");

            // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const rawData = await this.extractListingData(page, url);

            console.log(rawData);
            return rawData;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}:`, error);
            return null;
        } finally {
            await page.close();
            console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    buildListingsUrl(page) {
        const { listingsUrl } = this.parsingConfig;
        if (listingsUrl.includes('{page}')) {
            return listingsUrl.replace('{page}', page);
        }
        return `${listingsUrl}?page=${page}`;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async extractListings(page) {
        const { selectors } = this.parsingConfig;
        const { container, link } = selectors.listings || {};

        if (!container || !link) {
            console.warn("‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
            return [];
        }

        try {
            return await page.$$eval(container, (elements, linkSelector) => {
                return elements
                    .map(el => {
                        const linkEl = el.querySelector(linkSelector);
                        return linkEl ? linkEl.getAttribute("href") : null;
                    })
                    .filter(href => href && href.startsWith('http'));
            }, link);
        } catch (error) {
            console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", error.message);
            return [];
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async extractListingData(page, url) {
        const { selectors, dataMapping } = this.parsingConfig;
        const details = selectors.details || {};

        const rawData = {
            short_url: url,
            photos: [],
            sellers: {},
            price: {},
            contact: {}
        };

        // –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        for (const [field, selector] of Object.entries(details)) {
            if (field === 'photos') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                rawData[field] = await this.extractPhotos(page, selector);
            } else if (field === 'price') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ü–µ–Ω—ã
                rawData[field] = await this.extractPrice(page, selector);
            } else if (field === 'sellers') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                rawData[field] = await this.extractSeller(page, selector);
            } else if (field === 'contact') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                rawData[field] = await this.extractContact(page, selector);
            } else {
                // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è
                rawData[field] = await this.safeEval(page, selector, el => el.textContent.trim());
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        return this.applyDataMapping(rawData);
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    async extractPhotos(page, photoConfig) {
        if (!photoConfig || !photoConfig.selector) return [];

        try {
            return await this.safeEvalAll(
                page, 
                photoConfig.selector, 
                imgs => imgs.map(img => {
                    const src = img.src || img.getAttribute('data-src');
                    return src && src.startsWith('//') ? 'https:' + src : src;
                }).filter(src => src)
            );
        } catch (error) {
            console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", error.message);
            return [];
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
     */
    async extractPrice(page, priceConfig) {
        if (!priceConfig) return { formatted: "0", raw: 0, currency: "Unknown" };

        const { formatted, raw, currency } = priceConfig;
        const result = { formatted: "0", raw: 0, currency: "Unknown" };

        if (formatted) {
            result.formatted = await this.safeEval(page, formatted, el => el.textContent.trim()) || "0";
        }

        if (raw) {
            const rawValue = await this.safeEval(page, raw, el => {
                const text = el.textContent.replace(/[^\d,]/g, "").trim();
                return parseFloat(text.replace(/,/g, "").replace(/\s/g, "")) || 0;
            });
            result.raw = rawValue || 0;
        }

        if (currency) {
            result.currency = await this.safeEval(page, currency, el => el.textContent.trim()) || "Unknown";
        }

        return result;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
     */
    async extractSeller(page, sellerConfig) {
        if (!sellerConfig) return { sellerName: "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", sellerType: "Unknown" };

        const result = { sellerName: "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", sellerType: "Unknown" };

        for (const [field, selector] of Object.entries(sellerConfig)) {
            if (selector) {
                result[field] = await this.safeEval(page, selector, el => el.textContent.trim()) || result[field];
            }
        }

        return result;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    async extractContact(page, contactConfig) {
        if (!contactConfig) return { phone: "–ù–µ —É–∫–∞–∑–∞–Ω" };

        const result = { phone: "–ù–µ —É–∫–∞–∑–∞–Ω" };

        for (const [field, selector] of Object.entries(contactConfig)) {
            if (selector) {
                result[field] = await this.safeEval(page, selector, el => el.textContent.trim()) || result[field];
            }
        }

        return result;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    applyDataMapping(rawData) {
        const { dataMapping } = this.parsingConfig;
        
        if (!dataMapping || Object.keys(dataMapping).length === 0) {
            return rawData;
        }

        const mappedData = { ...rawData };

        for (const [targetField, sourceField] of Object.entries(dataMapping)) {
            if (rawData[sourceField] !== undefined) {
                mappedData[targetField] = rawData[sourceField];
            }
        }

        return mappedData;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    validateData(data) {
        const { validation } = this.parsingConfig;
        
        if (!validation) {
            return super.validateData(data);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (validation.required) {
            for (const field of validation.required) {
                if (!data[field] || data[field] === "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") {
                    return false;
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        if (validation.minPrice && data.price && data.price.raw < validation.minPrice) {
            return false;
        }

        return true;
    }
}

module.exports = { ConfigParser };
