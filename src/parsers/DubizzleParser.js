const { BaseParser } = require('./BaseParser');

/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ Dubizzle.com (–ø—Ä–∏–º–µ—Ä)
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä
 */
class DubizzleParser extends BaseParser {
    constructor(config = {}) {
        super('Dubizzle', {
            baseUrl: 'https://www.dubizzle.com',
            listingsUrl: 'https://www.dubizzle.com/dubai/cars',
            maxPages: 30,
            ...config
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è Dubizzle
     */
    async* getListings() {
        let attempt = 0;
        let currentPage = 1;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ Dubizzle...");

                while (currentPage <= this.config.maxPages) {
                    const url = `${this.config.listingsUrl}?page=${currentPage}`;
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: this.config.timeout 
                    });

                    // –ñ–¥—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω (—Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Dubizzle)
                    await page.waitForSelector(
                        '.listing-item a[href*="/dubai/cars/"]', 
                        { timeout: 30000 }
                    );

                    const carLinks = await this.safeEvalAll(
                        page, 
                        '.listing-item a[href*="/dubai/cars/"]', 
                        (elements) =>
                            elements
                                .map((el) => el.getAttribute("href"))
                                .filter((href) => href && href.startsWith(this.config.baseUrl))
                    );

                    if (carLinks.length === 0) {
                        console.log(`üèÅ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º.`);
                        break;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

                    for (const link of carLinks) {
                        yield link;
                        await this.delay();
                    }

                    console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${currentPage + 1}`);
                    currentPage++;
                }

                return;

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
                attempt++;
                console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            } finally {
                await page.close();
                console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
            }
        }

        console.error("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –¥–ª—è Dubizzle
     */
    async parseListing(url) {
        const page = await this.createPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

            await page.goto(url, { 
                waitUntil: "domcontentloaded", 
                timeout: this.config.timeout 
            });

            console.log("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            await page.waitForSelector(".ad-title", { timeout: 15000 });

            console.log("üìÑ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...");

            // –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è Dubizzle (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            const title = await this.safeEval(page, ".ad-title", el => el.textContent.trim());

            const priceFormatted = await this.safeEval(
                page, 
                ".price", 
                el => el.textContent.replace(/[^\d,]/g, "").trim()
            );
            const priceRaw = priceFormatted ? parseFloat(priceFormatted.replace(/,/g, "").replace(/\s/g, "")) : null;
            const currency = "AED"; // Dubizzle –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AED

            // –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
            const year = await this.safeEval(
                page, 
                '.ad-attributes .attr-item:contains("Year") .attr-value', 
                el => el.textContent.trim()
            );

            const kilometers = await this.safeEval(
                page, 
                '.ad-attributes .attr-item:contains("Kilometers") .attr-value', 
                el => el.textContent.trim()
            );

            const make = await this.safeEval(
                page, 
                '.ad-attributes .attr-item:contains("Make") .attr-value', 
                el => el.textContent.trim()
            );

            const model = await this.safeEval(
                page, 
                '.ad-attributes .attr-item:contains("Model") .attr-value', 
                el => el.textContent.trim()
            );

            // –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            const photos = await this.safeEvalAll(
                page, 
                '.ad-images img', 
                imgs => imgs.map(img => img.src.startsWith('//') ? 'https:' + img.src : img.src)
            );

            // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            const sellerName = await this.safeEval(
                page, 
                ".seller-name", 
                el => el.textContent.trim()
            );

            const phone = await this.safeEval(
                page, 
                ".phone-number", 
                el => el.textContent.trim()
            );

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            const rawData = {
                short_url: url,
                title,
                photos,
                make: make || null,
                model: model || null,
                year,
                body_type: null,
                horsepower: null,
                fuel_type: null,
                motors_trim: null,
                kilometers,
                sellers: {
                    sellerName: sellerName || "–ù–µ —É–∫–∞–∑–∞–Ω",
                    sellerType: "Private", // Dubizzle –æ–±—ã—á–Ω–æ —á–∞—Å—Ç–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã
                    sellerLogo: null,
                    sellerProfileLink: null,
                },
                price: {
                    formatted: priceFormatted,
                    raw: priceRaw,
                    currency,
                },
                exterior_color: null,
                location: "Dubai",
                contact: {
                    phone: phone || "–ù–µ —É–∫–∞–∑–∞–Ω",
                },
            };

            console.log(rawData);
            return rawData;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}:`, error);
            return null;
        } finally {
            await page.close();
            console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Dubizzle
     */
    validateData(data) {
        return super.validateData(data) && 
               data.title && 
               data.title !== "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
}

module.exports = { DubizzleParser };
