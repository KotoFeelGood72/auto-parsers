/**
 * –ú–æ–¥—É–ª—å –ø–∞—Ä—Å–µ—Ä–∞ Dubicars
 * –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ Dubicars.com
 */

const { scrapeDubicarsListings } = require('./listings');
const { scrapeDubicarsDetails } = require('./details');
const { startBrowser } = require('../../utils/browser');

class DubicarsModule {
    constructor() {
        this.name = 'Dubicars';
        this.browser = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    async initialize() {
        try {
            console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è ${this.name}...`);
            
            // –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            this.browser = await startBrowser();
            
            console.log(`‚úÖ –ú–æ–¥—É–ª—å ${this.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è ${this.name}:`, error.message);
            return false;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async run() {
        try {
            console.log(`üèÉ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${this.name}...`);
            
            if (!this.browser) {
                throw new Error('–ú–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            let processedCount = 0;
            const maxProcessed = 5; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            for await (const listingUrl of scrapeDubicarsListings(this.browser)) {
                if (processedCount >= maxProcessed) {
                    console.log(`üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${maxProcessed}`);
                    break;
                }

                console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${processedCount + 1}: ${listingUrl}`);
                
                try {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    const carDetails = await scrapeDubicarsDetails(listingUrl, this.browser);
                    
                    if (carDetails) {
                        console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ ${processedCount + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
                        console.log(`   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${carDetails.title}`);
                        console.log(`   üí∞ –¶–µ–Ω–∞: ${carDetails.price_formatted}`);
                        console.log(`   üöó –ú–∞—Ä–∫–∞: ${carDetails.make}`);
                        console.log(`   üì∏ –§–æ—Ç–æ: ${carDetails.photos.length} —à—Ç.`);
                        
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        // await saveCarDetails(carDetails);
                    } else {
                        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${processedCount + 1}`);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${processedCount + 1}:`, error.message);
                }

                processedCount++;
            }

            console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ ${this.name} –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${processedCount}`);
            return { success: true, processed: processedCount };
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${this.name}:`, error.message);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ
     */
    getInfo() {
        return {
            name: this.name,
            initialized: !!this.browser,
            type: 'standalone'
        };
    }
}

module.exports = { DubicarsModule };
