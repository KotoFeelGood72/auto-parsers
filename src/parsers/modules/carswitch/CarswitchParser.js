const { BaseParser } = require('../../BaseParser');
const { saveData } = require('../../../utils/saveData');

/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ Carswitch.com
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–æ–¥–µ –∏–∑ –≤–µ—Ç–∫–∏ carswitch
 */
class CarswitchParser extends BaseParser {
    constructor(config) {
        super('Carswitch', {
            baseUrl: 'https://carswitch.com',
            listingsUrl: 'https://carswitch.com/uae/used-cars/search',
            ...config
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async* getListings() {
        let attempt = 0;
        let currentPage = 1;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ Carswitch...");

                while (true) {
                    const url = `${this.config.listingsUrl}?page=${currentPage}`;
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: 60000 
                    });

                    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    await page.waitForTimeout(3000);

                    // –°–∫—Ä–æ–ª–ª–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                    await this.autoScroll(page);
                    await page.waitForTimeout(2000);

                    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
                    let carLinks = [];
                    const possibleSelectors = [
                        ".car-cards-container a.block.touch-manipulation",
                        ".car-cards-container a[href*='/used-car/']",
                        ".car-cards-container a[href*='/dubai/used-car/']",
                        "a[href*='/used-car/']",
                        "a[href*='/dubai/used-car/']",
                        "#main-listing-div .pro-item a.image-wrapper",
                        "#main-listing-div .pro-item a",
                        ".pro-item a.image-wrapper",
                        ".pro-item a",
                        "a[href*='/car/']",
                        "a[href*='/used-cars/']"
                    ];

                    for (const selector of possibleSelectors) {
                        try {
                            await page.waitForSelector(selector, { timeout: 10000 });
                            carLinks = await page.$$eval(
                                selector,
                                (anchors) => anchors.map((a) => a.href).filter(Boolean)
                            );
                            
                            if (carLinks.length > 0) {
                                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                                break;
                            }
                        } catch (error) {
                            continue;
                        }
                    }

                    if (carLinks.length === 0) {
                        console.warn(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                        break;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

                    for (const link of carLinks) {
                        yield link;
                    }
                    currentPage++;
                }

                break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}:`, error);
                attempt++;
                
                if (attempt >= this.config.maxRetries) {
                    throw error;
                }
                
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.maxRetries}...`);
                await this.sleep(this.config.retryDelay);
            } finally {
                await page.close();
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
     */
    async parseListing(url) {
        return await this.parseCarDetails(url);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async run() {
        const results = [];
        
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ ${this.name}...`);
            
            for await (const listingUrl of this.getListings()) {
                console.log(`üöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${listingUrl}`);
                
                const data = await this.parseListing(listingUrl);
                if (data && this.validateData(data)) {
                    const normalizedData = this.normalizeData(data);
                    results.push(normalizedData);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
                    await this.saveData(normalizedData);
                    
                    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${data.title}`);
                } else {
                    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): ${listingUrl}`);
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await this.sleep(this.config.delayBetweenRequests);
            }
            
            console.log(`‚úÖ –ü–∞—Ä—Å–µ—Ä ${this.name} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            return results;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ ${this.name}:`, error.message);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    async parseCarDetails(url) {
        const page = await this.createPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);
            
            await page.setExtraHTTPHeaders({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            });

            await page.goto(url, {
                waitUntil: "domcontentloaded",
                timeout: 15000
            });

            console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            try {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
                const possibleSelectors = [
                    '.font-bold.rtl\\:-ml-12.text-primary-500.cursor-pointer',
                    '.font-bold.text-primary-500.cursor-pointer',
                    '.text-primary-500.cursor-pointer',
                    '.font-bold.cursor-pointer',
                    'button[class*="cursor-pointer"]',
                    'div[class*="cursor-pointer"]',
                    'span[class*="cursor-pointer"]',
                    '[class*="text-primary-500"]',
                    'button',
                    'div[role="button"]'
                ];
                
                let detailsButton = null;
                for (const selector of possibleSelectors) {
                    detailsButton = await page.$(selector);
                    if (detailsButton) {
                        console.log("üîç –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º:", selector);
                        break;
                    }
                }
                
                if (detailsButton) {
                    console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...");
                    await detailsButton.click();
                    await page.waitForTimeout(3000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª–æ—Å—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    const modal = await page.$('.flex-1.px-8.py-28.sm\\:px-24.sm\\:py-24.overflow-y-auto.flex.\\!py-4.w-full.h-full');
                    console.log("üîç –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ:", !!modal);
                } else {
                    console.log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ —Å –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º");
                    
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å cursor-pointer
                    const allClickableElements = await page.$$eval('[class*="cursor-pointer"]', elements => 
                        elements.map(el => ({
                            tagName: el.tagName,
                            className: el.className,
                            textContent: el.textContent?.trim().substring(0, 50)
                        }))
                    );
                    console.log("üîç –í—Å–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:", allClickableElements);
                }
            } catch (error) {
                console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:", error.message);
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π –Ω–∞–±–æ—Ä —Ñ–∏—á –∏–∑ Car Overview (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            const overviewFeatures = await page.$$eval(
                ".md\\:flex.md\\:flex-row.flex-col.md\\:items-start.items-stretch.md\\:gap-1.gap-4.w-full .md\\:flex-1.bg-white.p-4",
                items => {
                    const map = {};
                    items.forEach(item => {
                        const key = item.querySelector("h3.font-medium")?.textContent.trim();
                        const val = item.querySelector("p.text-sm.text-label-black")?.textContent.trim();
                        if (key) map[key] = val;
                    });
                    return map;
                }
            );

            // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π –Ω–∞–±–æ—Ä —Ñ–∏—á –∏–∑ Car details (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            const detailFeatures = await page.$$eval(
                ".mt-2.md\\:text-base.text-sm.leading-5",
                items => {
                    const map = {};
                    const text = items?.textContent?.trim();
                    if (text) {
                        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –≤–∏–¥–∞ "First owner: No ‚Ä¢ Specs: GCC specs ‚Ä¢ More"
                        const parts = text.split('‚Ä¢');
                        parts.forEach(part => {
                            const [key, val] = part.split(':');
                            if (key && val) {
                                map[key.trim()] = val.trim();
                            }
                        });
                    }
                    return map;
                }
            );

            // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const modalFeatures = await page.evaluate(() => {
                const modal = document.querySelector('.flex-1.px-8.py-28.sm\\:px-24.sm\\:py-24.overflow-y-auto.flex.\\!py-4.w-full.h-full');
                console.log('Modal found:', !!modal);
                if (!modal) return {};

                const map = {};
                
                // –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                const rows = modal.querySelectorAll('.flex.w-full.justify-between.py-3.border-b.border-gray-100');
                console.log('Rows found:', rows.length);
                rows.forEach(row => {
                    const spans = row.querySelectorAll('span');
                    if (spans.length >= 2) {
                        const key = spans[0]?.textContent?.trim();
                        const value = spans[1]?.textContent?.trim();
                        console.log('Found param:', key, '=', value);
                        if (key && value) {
                            map[key] = value;
                        }
                    }
                });

                return map;
            });

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–Ω—É –∫–∞—Ä—Ç—É
            const rawFeatures = {
                ...overviewFeatures,
                ...detailFeatures,
                ...modalFeatures
            };

            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            console.log("üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", rawFeatures);
            console.log("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:", modalFeatures);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            const title = await this.safeEval(page, "h2.text-base.md\\:text-2xl.font-medium.text-label-black", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            console.log("üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:", title);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ - –∏—â–µ–º span –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å alt="Year"
            const yearText = await page.evaluate(() => {
                const yearImg = Array.from(document.querySelectorAll('img')).find(img => 
                    img.getAttribute('alt') === 'Year' || img.getAttribute('alt') === '–ì–æ–¥'
                );
                if (yearImg) {
                    const nextSpan = yearImg.parentElement?.querySelector('span');
                    return nextSpan?.textContent?.trim() || null;
                }
                return null;
            }) 
            const year = yearText ? yearText.replace(/\D/g, "") : null;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–±–µ–≥ - –∏—â–µ–º span –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å alt="Mileage"
            const kmText = await page.evaluate(() => {
                const mileageImg = Array.from(document.querySelectorAll('img')).find(img => 
                    img.getAttribute('alt') === 'Mileage' || img.getAttribute('alt') === '–ü—Ä–æ–±–µ–≥'
                );
                if (mileageImg) {
                    const nextSpan = mileageImg.parentElement?.querySelector('span');
                    return nextSpan?.textContent?.trim() || null;
                }
                return null;
            }) 
            const kilometers = kmText.replace(/\D/g, "") || "0";

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            const priceText = await this.safeEval(page, ".md\\:text-2xl.text-base.font-bold.text-black", el => el.textContent) || "";
            const priceFormatted = priceText.replace(/[^\d,]/g, "").trim();
            const priceRaw = priceFormatted ?
                parseFloat(priceFormatted.replace(/,/g, "")) :
                null;

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å alt, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å "Car image"
            const photos = await page.evaluate(() => {
                const carImages = Array.from(document.querySelectorAll('img')).filter(img => 
                    img.getAttribute('alt') && img.getAttribute('alt').startsWith('Car image')
                );
                
                return Array.from(
                    new Set(
                        carImages
                            .map(img => img.getAttribute("src") || img.src)
                            .map(src => src.startsWith("//") ? "https:" + src : src)
                            .filter(src => src && (src.includes("carswitch.com") || src.includes("cloudfront.net")))
                    )
                );
            }) || [];

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏—é - –∏—â–µ–º span –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å alt="Location"
            const location = await page.evaluate(() => {
                const locationImg = Array.from(document.querySelectorAll('img')).find(img => 
                    img.getAttribute('alt') === 'Location' || img.getAttribute('alt') === '–õ–æ–∫–∞—Ü–∏—è'
                );
                if (locationImg) {
                    const nextSpan = locationImg.parentElement?.querySelector('span');
                    return nextSpan?.textContent?.trim() || null;
                }
                return null;
            }) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

            // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
            const sellerName = "CarSwitch";
            const sellerType = "–î–∏–ª–µ—Ä";
            const sellerLogo = null;
            const sellerProfileLink = null;
            const phoneNumber = "–ù–µ —É–∫–∞–∑–∞–Ω";

            // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            const carDetails = {
                short_url: url,
                title,
                photos,
                main_image: photos.length > 0 ? photos[0] : null,
                make: this.pick(rawFeatures, ["Make", "–ú–∞—Ä–∫–∞", "Brand", "brand"], title && title !== "–ù–µ —É–∫–∞–∑–∞–Ω–æ" ? title.split(" ")[0] : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                model: this.pick(rawFeatures, ["Model", "–ú–æ–¥–µ–ª—å", "Car Model", "car model"], title && title !== "–ù–µ —É–∫–∞–∑–∞–Ω–æ" ? title.replace(/^\S+\s*/, "") : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                year,
                body_type: this.pick(rawFeatures, ["Body type", "Body Type", "–¢–∏–ø –∫—É–∑–æ–≤–∞", "body type", "Body", "body", "Vehicle Type", "vehicle type"], "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                horsepower: this.pick(rawFeatures, ["Engine Size", "–ú–æ—â–Ω–æ—Å—Ç—å", "Engine", "engine", "Displacement", "displacement"], null),
                fuel_type: this.pick(rawFeatures, ["Fuel Type", "–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", "Fuel", "fuel", "Fuel type", "fuel type", "Gas", "gas", "Petrol", "petrol"], "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                motors_trim: this.pick(rawFeatures, ["Specs", "–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", "Spec", "spec", "Specification", "specification", "Trim", "trim", "Variant", "variant"], "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                kilometers,
                sellers: {
                    sellerName,
                    sellerType,
                    sellerLogo,
                    sellerProfileLink,
                },
                price: {
                    formatted: priceFormatted,
                    raw: priceRaw,
                    currency: "AED",
                },
                exterior_color: this.pick(rawFeatures, ["Color", "–¶–≤–µ—Ç", "Exterior Color", "exterior color", "Paint", "paint", "Exterior", "exterior", "Body Color", "body color"], "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                location,
                contact: {
                    phone: phoneNumber,
                },
            };

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
            try {
                const closeButton = await page.$('.rounded-full.w-6.h-6.flex.items-center.border.border-\\[\\#0F1B41\\].justify-center.hover\\:bg-gray-100.cursor-pointer.transition-colors');
                if (closeButton) {
                    await closeButton.click();
                    await page.waitForTimeout(500);
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            }

            console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã");
            return carDetails;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
            return null;
        } finally {
            await page.close();
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ eval –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    async safeEval(page, selector, fn) {
        try {
            return await page.$eval(selector, fn);
        } catch {
            return null;
        }
    }

    /**
     * –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
     */
    pick(map, keys, def = null) {
        for (const k of keys) {
            if (map[k] != null) return map[k];
        }
        return def;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async autoScroll(page) {
        await page.evaluate(async () => {
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
            const containers = [
                document.querySelector(".car-cards-container"),
                document.querySelector("#main-listing-div"),
                document.querySelector("main"),
                document.body
            ];

            const container = containers.find(c => c !== null);
            if (!container) return;

            await new Promise((resolve) => {
                let lastScrollHeight = 0;
                let attemptsWithoutChange = 0;

                const interval = setInterval(() => {
                    container.scrollBy(0, 300);

                    const currentHeight = container.scrollHeight;
                    if (currentHeight !== lastScrollHeight) {
                        attemptsWithoutChange = 0;
                        lastScrollHeight = currentHeight;
                    } else {
                        attemptsWithoutChange++;
                    }

                    // –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ 3 "–ø—É—Å—Ç—ã—Ö" —Å–∫—Ä–æ–ª–ª–æ–≤
                    if (attemptsWithoutChange >= 3) {
                        clearInterval(interval);
                        resolve();
                    }
                }, 400);
            });
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
     */
    async saveData(carDetails) {
        try {
            await saveData(carDetails);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`, error.message);
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—É–∑—ã
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = { CarswitchParser };
