const { BaseParser } = require('../../BaseParser');
const { saveData } = require('../../../utils/saveData');

/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ AutoTraders.ae
 * –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ConfigParser
 */
class AutotradersParser extends BaseParser {
    constructor(config = {}) {
        super('AutoTraders', {
            baseUrl: 'https://www.autotraders.ae',
            listingsUrl: 'https://www.autotraders.ae/used-cars/?page={page}',
            timeout: 90000,
            delayBetweenRequests: 1000,
            maxRetries: 3,
            enableImageLoading: false,
            ...config
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async* getListings() {
        let attempt = 0;
        let currentPage = 1;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ AutoTraders...");

                await page.setExtraHTTPHeaders({
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                });

                while (true) {
                    const url = this.config.listingsUrl.replace('{page}', currentPage);
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: this.config.timeout 
                    });

                    // –ñ–¥—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
                    await page.waitForSelector("div.row.cars-cont div.col-md-3 > a", { timeout: 30000 });

                    const carLinks = await page.$$eval("div.row.cars-cont div.col-md-3 > a", (elements) =>
                        elements
                            .map((el) => el.getAttribute("href"))
                            .filter((href) => href && href.includes("/used-cars/"))
                    );

                    if (carLinks.length === 0) {
                        console.log(`üèÅ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º.`);
                        break;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–π
                    for (const link of carLinks) {
                        const fullUrl = link.startsWith("http") ? link : `${this.config.baseUrl}${link}`;
                        yield fullUrl;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const hasNextPage = await page.$('.pagination a[rel="next"]');
                    if (!hasNextPage) {
                        console.log("üèÅ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.");
                        break;
                    }

                    currentPage++;
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    await this.delay(this.config.delayBetweenRequests);
                }

                return; // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
                attempt++;
                
                if (attempt < this.config.maxRetries) {
                    console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...");
                    await this.restartBrowser();
                }
            } finally {
                await page.close();
            }
        }

        console.error("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
     */
    async parseListing(url) {
        const page = await this.createPage();
        
        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

            await page.setExtraHTTPHeaders({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            });

            await page.goto(url, {
                waitUntil: "domcontentloaded",
                timeout: this.config.timeout,
            });

            // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            const safeEval = async (selector, callback) => {
                try {
                    return await page.$eval(selector, callback);
                } catch (error) {
                    return null;
                }
            };

            console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const title = await safeEval(".title h2", el => el.textContent.trim());
            const make = await safeEval(".car-det-list span:has(i.fa-car) + span.txt", el => el.textContent.trim());
            const model = await safeEval(".car-det-list span:has(i.fa-car-side) + span.txt", el => el.textContent.trim());
            const year = await safeEval(".car-det-list span:has(i.far.fa-calendar-alt) + span.txt", el => el.textContent.trim());
            const kilometers = await safeEval(".car-det-list span:has(i.fa-tachometer-alt) + span.txt", el => el.textContent.replace(/\D/g, "").trim());
            const bodyType = await safeEval(".car-det-list span:has(i.fa-truck-pickup) + span", el => el.textContent.trim());
            const fuelType = await safeEval(".car-det-list span:has(i.fa-gas-pump) + span", el => el.textContent.trim());
            const exteriorColor = await safeEval(".car-det-list .d-flex:nth-child(4) .detail-col:last-child span:nth-child(2)", el => el.textContent.trim());

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            const priceFormatted = await safeEval(".price", el => el.textContent.replace(/[^\d,]/g, "").trim());
            const priceRaw = priceFormatted ? parseFloat(priceFormatted.replace(/,/g, "")) : null;
            const currency = "AED";

            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            const photos = await page.$$eval("#gallery .lightgallery.item", imgs => 
                imgs.map(img => img.href).filter(href => href)
            );

            // –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ)
            const mainImage = photos && photos.length > 0 ? photos[0] : null;

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            const sellerName = await safeEval(".side-right .dpname", el => el.textContent.trim());
            const sellerType = "Dealer"; // –ù–∞ AutoTraders —É –≤—Å–µ—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–∏–ø "Dealer"
            const sellerLogo = await safeEval(".side-right .logo img", img => img.src);
            const sellerProfileLink = await safeEval(".side-right .logo a", a => a.href);

            // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            const phoneNumber = await safeEval(".user-contact a[href^='tel:']", el => el.href.replace("tel:", "").trim());

            const location = await safeEval(".side-right .dcname", el => el.textContent.trim());
            const horsepower = await safeEval(".car-det-list .d-flex:nth-child(6) .detail-col:first-child span:nth-child(2)", el => el.textContent.trim());

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
            const carDetails = {
                short_url: url,
                title: title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                photos: photos || [],
                main_image: mainImage,
                make: make || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                model: model || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                year: year || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                body_type: bodyType || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                horsepower: horsepower || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                fuel_type: fuelType || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                motors_trim: null, // –ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ
                kilometers: parseInt(kilometers, 10) || 0,
                // –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–Ω
                price_formatted: priceFormatted || "0",
                price_raw: priceRaw || 0,
                currency: currency,
                exterior_color: exteriorColor || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                location: location || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                // –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                phone: phoneNumber || "–ù–µ —É–∫–∞–∑–∞–Ω",
                // –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                seller_name: sellerName || "–ù–µ —É–∫–∞–∑–∞–Ω",
                seller_type: sellerType || "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ",
                seller_logo: sellerLogo || null,
                seller_profile_link: sellerProfileLink || null,
            };

            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–ª—è: ${title}`);
            return carDetails;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
            return null;
        } finally {
            await page.close();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async run() {
        const results = [];
        
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä ${this.name}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –ø–∞—Ä—Å–∏–º –∫–∞–∂–¥–æ–µ
            for await (const listingUrl of this.getListings()) {
                console.log(`üöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${listingUrl}`);
                
                try {
                    const carDetails = await this.parseListing(listingUrl);
                    if (carDetails) {
                        results.push(carDetails);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
                        await this.saveData(carDetails);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${listingUrl}:`, error);
                }
            }
            
            console.log(`‚úÖ –ü–∞—Ä—Å–µ—Ä ${this.name} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            return results;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ ${this.name}:`, error.message);
            throw error;
        } finally {
            await this.cleanup();
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ BaseParser –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π AutoTraders
     */
    normalizeData(rawData) {
        return {
            short_url: rawData.short_url || null,
            title: rawData.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            make: rawData.make || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            model: rawData.model || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            year: rawData.year || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            body_type: rawData.body_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            horsepower: rawData.horsepower || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            fuel_type: rawData.fuel_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            motors_trim: rawData.motors_trim || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            kilometers: parseInt(rawData.kilometers, 10) || 0,
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ü–µ–Ω - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è, –∑–∞—Ç–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
            price_formatted: rawData.price_formatted || rawData.price?.formatted || "0",
            price_raw: rawData.price_raw || rawData.price?.raw || 0,
            currency: rawData.currency || rawData.price?.currency || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            exterior_color: rawData.exterior_color || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            location: rawData.location || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è, –∑–∞—Ç–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
            phone: rawData.phone || rawData.contact?.phone || "–ù–µ —É–∫–∞–∑–∞–Ω",
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è, –∑–∞—Ç–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
            seller_name: rawData.seller_name || rawData.sellers?.sellerName || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            seller_type: rawData.seller_type || rawData.sellers?.sellerType || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            seller_logo: rawData.seller_logo || rawData.sellers?.sellerLogo || null,
            seller_profile_link: rawData.seller_profile_link || rawData.sellers?.sellerProfileLink || null,
            main_image: rawData.main_image || null,
            photos: rawData.photos || []
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
     */
    async saveData(carDetails) {
        try {
            // –î–∞–Ω–Ω—ã–µ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –ø–∞—Ä—Å–µ—Ä–µ, –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
            await saveData(carDetails);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`, error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Å–µ—Ä–µ
     */
    getInfo() {
        return {
            name: this.name,
            baseUrl: this.config.baseUrl,
            listingsUrl: this.config.listingsUrl,
            timeout: this.config.timeout
        };
    }
}

module.exports = { AutotradersParser };
