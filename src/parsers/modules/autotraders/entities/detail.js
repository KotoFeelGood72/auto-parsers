/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è Autotraders.com
 */

class AutotradersDetailParser {
    constructor(config) {
        this.config = config;
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Autotraders
        this.selectors = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            title: '.vehicle-title',
            price: '.vehicle-price',
            location: '.vehicle-location',
            
            // –î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            make: '.vehicle-make',
            model: '.vehicle-model',
            year: '.vehicle-year',
            bodyType: '.vehicle-body-type',
            fuelType: '.vehicle-fuel-type',
            transmission: '.vehicle-transmission',
            mileage: '.vehicle-mileage',
            color: '.vehicle-color',
            
            // –ü—Ä–æ–¥–∞–≤–µ—Ü
            sellerName: '.seller-name',
            sellerType: '.seller-type',
            phone: '.seller-phone',
            
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images: '.vehicle-images img',
            mainImage: '.vehicle-main-image'
        };
        
        // –ü–æ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.dataFields = {
            make: ['Make', '–ú–∞—Ä–∫–∞', 'Brand', 'brand'],
            model: ['Model', '–ú–æ–¥–µ–ª—å', 'Car Model', 'car model'],
            bodyType: ['Body type', 'Body Type', '–¢–∏–ø –∫—É–∑–æ–≤–∞', 'body type', 'Body', 'body'],
            fuelType: ['Fuel Type', '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞', 'Fuel', 'fuel', 'Fuel type', 'fuel type'],
            transmission: ['Transmission', '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á', 'Gear', 'gear'],
            color: ['Color', '–¶–≤–µ—Ç', 'Exterior Color', 'exterior color']
        };
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    async parseCarDetails(url, context) {
        const page = await context.newPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);
            
            await page.setExtraHTTPHeaders({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            });

            await page.goto(url, {
                waitUntil: "domcontentloaded",
                timeout: 15000
            });

            console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            await page.waitForTimeout(2000);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            const title = await this.safeEval(page, this.selectors.title, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const priceText = await this.safeEval(page, this.selectors.price, el => el.textContent.trim()) || "";
            const location = await this.safeEval(page, this.selectors.location, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

            // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
            const priceFormatted = priceText.replace(/[^\d,]/g, "").trim();
            const priceRaw = priceFormatted ?
                parseFloat(priceFormatted.replace(/,/g, "")) :
                null;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            const make = await this.safeEval(page, this.selectors.make, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const model = await this.safeEval(page, this.selectors.model, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const yearText = await this.safeEval(page, this.selectors.year, el => el.textContent.trim()) || "";
            const year = yearText ? yearText.replace(/\D/g, "") : null;
            
            const bodyType = await this.safeEval(page, this.selectors.bodyType, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const fuelType = await this.safeEval(page, this.selectors.fuelType, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const transmission = await this.safeEval(page, this.selectors.transmission, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            
            const mileageText = await this.safeEval(page, this.selectors.mileage, el => el.textContent.trim()) || "";
            const kilometers = mileageText ? mileageText.replace(/\D/g, "") : "0";
            
            const exteriorColor = await this.safeEval(page, this.selectors.color, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

            // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            const sellerName = await this.safeEval(page, this.selectors.sellerName, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const sellerType = await this.safeEval(page, this.selectors.sellerType, el => el.textContent.trim()) || "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ";
            const phoneNumber = await this.safeEval(page, this.selectors.phone, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω";

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            const photos = await page.evaluate((selector) => {
                const images = Array.from(document.querySelectorAll(selector));
                return Array.from(
                    new Set(
                        images
                            .map(img => img.getAttribute("src") || img.src)
                            .map(src => src.startsWith("//") ? "https:" + src : src)
                            .filter(src => src && (src.includes("autotraders.com") || src.includes("cloudfront.net")))
                    )
                );
            }, this.selectors.images) || [];

            const mainImage = await this.safeEval(page, this.selectors.mainImage, el => el.src) || (photos.length > 0 ? photos[0] : null);

            // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            const carDetails = {
                short_url: url,
                title,
                photos,
                main_image: mainImage,
                make,
                model,
                year,
                body_type: bodyType,
                horsepower: "–ù–µ —É–∫–∞–∑–∞–Ω–æ", // Autotraders –æ–±—ã—á–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ—â–Ω–æ—Å—Ç—å
                fuel_type: fuelType,
                motors_trim: transmission,
                kilometers,
                sellers: {
                    sellerName,
                    sellerType,
                    sellerLogo: null,
                    sellerProfileLink: null,
                },
                price: {
                    formatted: priceFormatted,
                    raw: priceRaw,
                    currency: "AED",
                },
                exterior_color: exteriorColor,
                location,
                contact: {
                    phone: phoneNumber,
                },
            };

            console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã");
            return carDetails;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
            return null;
        } finally {
            await page.close();
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ eval –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    async safeEval(page, selector, fn) {
        try {
            return await page.$eval(selector, fn);
        } catch {
            return null;
        }
    }

    /**
     * –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
     */
    pick(map, keys, def = null) {
        for (const k of keys) {
            if (map[k] != null) return map[k];
        }
        return def;
    }
}

module.exports = { AutotradersDetailParser };
