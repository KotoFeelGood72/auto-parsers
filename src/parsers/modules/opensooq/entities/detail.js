/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è OpenSooq.com
 */

class OpenSooqDetailParser {
    constructor(config) {
        this.config = config;
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã OpenSooq
        this.selectors = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            title: 'h1[data-id="postViewTitle"]',
            price: '[data-id="post_price"]',
            location: 'a[data-id="location"]',
            
            // –î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            make: 'li[data-id*="singeInfoField_0"] a, li[data-id*="singeInfoField"]:has(p:contains("Make")) a',
            model: 'li[data-id*="singeInfoField_2"] a, li[data-id*="singeInfoField"]:has(p:contains("Model")) a',
            year: 'li[data-id*="singeInfoField_3"] a, li[data-id*="singeInfoField"]:has(p:contains("Year")) a',
            bodyType: 'li[data-id*="singeInfoField"]:has(p:contains("Body")) a',
            fuelType: 'li[data-id*="singeInfoField"]:has(p:contains("Fuel")) a',
            transmission: 'li[data-id*="singeInfoField"]:has(p:contains("Transmission")) a, li[data-id*="singeInfoField"]:has(p:contains("Gear")) a',
            mileage: 'li[data-id*="singeInfoField"]:has(p:contains("Mileage")) a, li[data-id*="singeInfoField"]:has(p:contains("KM")) a',
            color: 'li[data-id*="singeInfoField"]:has(p:contains("Color")) a',
            
            // –ü—Ä–æ–¥–∞–≤–µ—Ü
            sellerSection: '#PostViewOwnerCard',
            sellerName: 'h3[data-id="member_name"]',
            sellerType: '#PostViewOwnerCard h3', // Title "Listing Owner"
            phone: 'button[data-id="call_btn"] span,',
            
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images: 'button.image-gallery-thumbnail img.image-gallery-thumbnail-image',
            mainImage: 'button.image-gallery-thumbnail img.image-gallery-thumbnail-image'
        };
        
        // –ü–æ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.dataFields = {
            make: ['Make', '–ú–∞—Ä–∫–∞', 'Brand', 'brand'],
            model: ['Model', '–ú–æ–¥–µ–ª—å', 'Car Model', 'car model'],
            bodyType: ['Body type', 'Body Type', '–¢–∏–ø –∫—É–∑–æ–≤–∞', 'body type', 'Body', 'body'],
            fuelType: ['Fuel Type', '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞', 'Fuel', 'fuel', 'Fuel type', 'fuel type'],
            transmission: ['Transmission', '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á', 'Gear', 'gear'],
            color: ['Color', '–¶–≤–µ—Ç', 'Exterior Color', 'exterior color']
        };
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    async parseCarDetails(url, context) {
        const page = await context.newPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);
            
            await page.setExtraHTTPHeaders({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            });

            await page.goto(url, {
                waitUntil: "domcontentloaded",
                timeout: 15000
            });

            console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            await page.waitForTimeout(2000);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            const title = await this.safeEval(page, this.selectors.title, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const priceText = await this.safeEval(page, this.selectors.price, el => el.textContent.trim()) || "";
            const location = await this.safeEval(page, this.selectors.location, el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

            // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
            const priceFormatted = priceText.replace(/[^\d,]/g, "").trim();
            const priceRaw = priceFormatted ?
                parseFloat(priceFormatted.replace(/,/g, "")) :
                null;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ li —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-id
            const carDetailsData = await page.evaluate(() => {
                const items = Array.from(document.querySelectorAll('li[data-id*="singeInfoField"]'));
                const result = {};
                
                items.forEach(item => {
                    const label = item.querySelector('p.noWrap')?.textContent?.trim();
                    // –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ a, –ø–æ—Ç–æ–º span
                    let value = item.querySelector('a')?.textContent?.trim();
                    if (!value) {
                        value = item.querySelector('span')?.textContent?.trim();
                    }
                    
                    if (label && value) {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è –∫–∞–∫ –µ—Å—Ç—å
                        result[label] = value;
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        if (label === 'Car Make') result.make = value;
                        if (label === 'Model') result.model = value;
                        if (label === 'Year') result.year = value;
                        if (label === 'Trim') result.trim = value;
                        if (label === 'Kilometers') result.mileage = value;
                        if (label === 'Body Type') result.bodyType = value;
                        if (label === 'Fuel') result.fuelType = value;
                        if (label === 'Transmission') result.transmission = value;
                        if (label === 'Exterior Color') result.exteriorColor = value;
                        if (label === 'Interior Color') result.interiorColor = value;
                        if (label === 'Engine Size (cc)') result.engineSize = value;
                        if (label === 'Number of Seats') result.seats = value;
                    }
                });
                
                return result;
            });
            
            const make = carDetailsData['Car Make'] || carDetailsData.make || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const model = carDetailsData['Model'] || carDetailsData.model || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const trim = carDetailsData['Trim'] || carDetailsData.trim || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const yearText = carDetailsData['Year'] || carDetailsData.year || "";
            const year = yearText ? yearText.replace(/\D/g, "") : null;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–±–µ–≥ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "60,000 - 69,999"
            let kilometersText = carDetailsData['Kilometers'] || carDetailsData.mileage || "";
            let kilometers = "0";
            if (kilometersText) {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                const match = kilometersText.match(/(\d+)/);
                if (match) {
                    kilometers = match[1].replace(/,/g, "");
                }
            }
            
            const bodyType = carDetailsData['Body Type'] || carDetailsData.bodyType || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const fuelType = carDetailsData['Fuel'] || carDetailsData.fuelType || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const transmission = carDetailsData['Transmission'] || carDetailsData.transmission || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const exteriorColor = carDetailsData['Exterior Color'] || carDetailsData.exteriorColor || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

            // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            const sellerData = await page.evaluate(() => {
                const section = document.querySelector('#PostViewOwnerCard');
                if (!section) return null;
                
                const name = section.querySelector('h3[data-id="member_name"]')?.textContent?.trim();
                const title = section.querySelector('h3.font-22')?.textContent?.trim(); // "Listing Owner"
                const logo = section.querySelector('img')?.src;
                const profileLink = section.querySelector('a[href*="/shops/"], a[href*="/member/"]')?.href;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
                let sellerType = "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ";
                if (profileLink && profileLink.includes('/shops/')) {
                    sellerType = "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü";
                }
                
                return { name, sellerType, logo, profileLink };
            });
            
            const sellerName = sellerData?.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const sellerType = sellerData?.sellerType || "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ";
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∑–≤–æ–Ω–∫–∞
            // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –ø–æ–∑–∂–µ
            let phoneNumber = "–ù–µ —É–∫–∞–∑–∞–Ω";
            
            try {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                for (let i = 0; i < 3; i++) {
                    const phoneData = await page.evaluate(() => {
                        // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        const callButton = document.querySelector('button[data-id="call_btn"]') || 
                                          document.querySelector('button[data-id="sticky_call_btn"]');
                        
                        if (callButton) {
                            // –ò—â–µ–º span —Å –∫–ª–∞—Å—Å–æ–º ltr –∏–ª–∏ inline –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
                            const phoneSpan = callButton.querySelector('span.ltr, span.inline');
                            if (phoneSpan) {
                                return phoneSpan.textContent?.trim();
                            }
                            // –ï—Å–ª–∏ span –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º SVG
                            const fullText = callButton.textContent?.trim();
                            // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
                            return fullText ? fullText.replace(/\D+/g, ' ') : null;
                        }
                        
                        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º —Å–æ span.ltr
                        const phoneElements = document.querySelectorAll('button span.ltr, button span.inline');
                        for (let elem of phoneElements) {
                            const text = elem.textContent?.trim();
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã)
                            if (text && /\d/.test(text)) {
                                return text;
                            }
                        }
                        
                        return null;
                    });
                    
                    if (phoneData) {
                        phoneNumber = phoneData;
                        break;
                    }
                    
                    // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await page.waitForTimeout(1000);
                }
            } catch (error) {
                console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error.message);
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            const photos = await page.evaluate((selector) => {
                const images = Array.from(document.querySelectorAll(selector));
                return images
                    .map(img => img.getAttribute("src") || img.src)
                    .filter(src => src && src.trim().length > 0)
                    .filter((value, index, self) => self.indexOf(value) === index); // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            }, this.selectors.images) || [];

            const mainImage = await this.safeEval(page, this.selectors.mainImage, el => el.src) || (photos.length > 0 ? photos[0] : null);

            // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            const carDetails = {
                short_url: url,
                title,
                photos,
                main_image: mainImage,
                make,
                model,
                trim,
                year,
                body_type: bodyType,
                horsepower: carDetailsData['Engine Size (cc)'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                fuel_type: fuelType,
                motors_trim: transmission,
                kilometers,
                engine_size: carDetailsData['Engine Size (cc)'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                seats: carDetailsData['Number of Seats'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                interior_color: carDetailsData['Interior Color'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                sellers: {
                    sellerName,
                    sellerType,
                    sellerLogo: sellerData?.logo || null,
                    sellerProfileLink: sellerData?.profileLink || null,
                },
                price: {
                    formatted: priceFormatted,
                    raw: priceRaw,
                    currency: "AED",
                },
                exterior_color: exteriorColor,
                location,
                contact: {
                    phone: phoneNumber,
                },
            };

            console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã");
            return carDetails;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
            return null;
        } finally {
            await page.close();
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ eval –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    async safeEval(page, selector, fn) {
        try {
            return await page.$eval(selector, fn);
        } catch {
            return null;
        }
    }

    /**
     * –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
     */
    pick(map, keys, def = null) {
        for (const k of keys) {
            if (map[k] != null) return map[k];
        }
        return def;
    }
}

module.exports = { OpenSooqDetailParser };
