const { BaseParser } = require('../../BaseParser');
const { saveData } = require('../../../utils/saveData');

/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ OpenSooq.com
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–æ–¥–µ –∏–∑ –≤–µ—Ç–∫–∏ opensooq
 */
class OpenSooqParser extends BaseParser {
    constructor(config) {
        super('OpenSooq', {
            baseUrl: 'https://ae.opensooq.com',
            listingsUrl: 'https://ae.opensooq.com/en/cars/cars-for-sale',
            maxPages: 50,
            ...config
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async* getListings() {
        let attempt = 0;
        let currentPage = 1;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ OpenSooq...");

                while (currentPage <= this.config.maxPages) {
                    const url = `${this.config.listingsUrl}/?page=${currentPage}`;
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: 60000 
                    });

                    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    await page.waitForTimeout(3000);

                    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    try {
                        await page.waitForSelector('a.postListItemData', { timeout: 30000 });
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                        break;
                    }

                    const carLinks = await page.$$eval('a.postListItemData', (elements) =>
                        elements
                            .map((el) => el.getAttribute("href"))
                            .filter((href) => href && href.startsWith("/en/search/"))
                    );

                    if (carLinks.length === 0) {
                        console.warn(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                        break;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

                    for (const link of carLinks) {
                        yield `${this.config.baseUrl}${link}`;
                    }
                    currentPage++;
                }

                break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}:`, error);
                attempt++;
                
                if (attempt >= this.config.maxRetries) {
                    throw error;
                }
                
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.maxRetries}...`);
                await this.sleep(this.config.retryDelay);
            } finally {
                await page.close();
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
     */
    async parseListing(url) {
        return await this.parseCarDetails(url);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async run() {
        const results = [];
        
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ ${this.name}...`);
            
            for await (const listingUrl of this.getListings()) {
                console.log(`üöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${listingUrl}`);
                
                const data = await this.parseListing(listingUrl);
                if (data && this.validateData(data)) {
                    const normalizedData = this.normalizeData(data);
                    results.push(normalizedData);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
                    await this.saveData(normalizedData);
                    
                    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${data.title}`);
                } else {
                    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): ${listingUrl}`);
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await this.sleep(this.config.delayBetweenRequests);
            }
            
            console.log(`‚úÖ –ü–∞—Ä—Å–µ—Ä ${this.name} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            return results;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ ${this.name}:`, error.message);
            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    async parseCarDetails(url) {
        const page = await this.createPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);
            
            await page.setExtraHTTPHeaders({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            });

            await page.goto(url, {
                waitUntil: "domcontentloaded",
                timeout: 30000
            });

            console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            const title = await this.safeEval(page, "h1", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

            const priceFormatted = await this.safeEval(page, "[data-id='post_price']", el => el.textContent.replace(/[^\d,]/g, "").trim()) || "";
            const priceRaw = priceFormatted ? parseFloat(priceFormatted.replace(/,/g, "")) : null;
            const currency = "AED";

            const location = await this.safeEval(page, "a[data-id='location']", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            const photos = await page.$$eval(".image-gallery-slide img.image-gallery-image", imgs =>
                imgs.map(img => img.src).filter(src => src)
            ) || [];

            const sellerName = await this.safeEval(page, "[data-id='member_name']", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω";
            const sellerLogo = await this.safeEval(page, "#PostViewOwnerCard img", img => img.src) || null;
            const sellerProfileLink = await this.safeEval(page, "#PostViewOwnerCard a", a => a.href) || null;

            const phoneNumber = await this.safeEval(page, "[data-id='call_btn'] span", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω";
            const motors_trim = await this.safeEval(page, "[data-id='singeInfoField_3'] a", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const bodyType = await this.safeEval(page, "[data-id='singeInfoField_6'] span", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const fuelType = await this.safeEval(page, "[data-id='singeInfoField_8'] span", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const kilometers = await this.safeEval(page, "[data-id='singeInfoField_5'] span", el => el.textContent.trim()) || "0";
            const make = await this.safeEval(page, "[data-id='singeInfoField_1'] a", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const exteriorColor = await this.safeEval(page, "[data-id='singeInfoField_11'] a", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const year = await this.safeEval(page, "[data-id='singeInfoField_4'] a", el => el.textContent.trim()) || "0";
            const model = await this.safeEval(page, "[data-id='singeInfoField_2'] a", el => el.textContent.trim()) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const horsepower = await this.safeEval(page, "[data-id='singeInfoField_10'] span", el => el.textContent.trim()) || null;

            // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            const carDetails = {
                short_url: url,
                title,
                photos,
                main_image: photos.length > 0 ? photos[0] : null,
                make: make,
                model: model,
                year: year,
                body_type: bodyType,
                horsepower: horsepower,
                fuel_type: fuelType,
                motors_trim: motors_trim,
                kilometers: kilometers,
                sellers: {
                    sellerName: sellerName,
                    sellerType: "–î–∏–ª–µ—Ä",
                    sellerLogo: sellerLogo,
                    sellerProfileLink: sellerProfileLink,
                },
                price: {
                    formatted: priceFormatted,
                    raw: priceRaw,
                    currency: currency,
                },
                exterior_color: exteriorColor,
                location: location,
                contact: {
                    phone: phoneNumber,
                },
            };

            console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã");
            return carDetails;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
            return null;
        } finally {
            await page.close();
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ eval –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    async safeEval(page, selector, fn) {
        try {
            return await page.$eval(selector, fn);
        } catch {
            return null;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
     */
    async saveData(carDetails) {
        try {
            await saveData(carDetails);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`, error.message);
        }
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—É–∑—ã
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = { OpenSooqParser };
