const { BaseParser } = require('../../BaseParser');

/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ Dubicars.com
 * –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ConfigParser
 */
class DubicarsParser extends BaseParser {
    constructor(config) {
        super('Dubicars', {
            baseUrl: 'https://www.dubicars.com',
            listingsUrl: 'https://www.dubicars.com/dubai/used',
            ...config
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async* getListings() {
        let attempt = 0;
        let currentPage = 1;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ Dubicars...");

                while (true) {
                    const url = this.config.listingsUrl.replace('{page}', currentPage);
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: this.config.timeout 
                    });

                    // –ñ–¥—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
                    await page.waitForSelector(
                        'section#serp-list li.serp-list-item a.image-container', 
                        { timeout: 30000 }
                    );

                    const carLinks = await page.$$eval(
                        'section#serp-list li.serp-list-item a.image-container', 
                        (elements, baseUrl) =>
                            elements
                                .map((el) => el.getAttribute("href"))
                                .filter((href) => href && href.startsWith(baseUrl)),
                        this.config.baseUrl
                    );

                    if (carLinks.length === 0) {
                        console.log(`üèÅ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º.`);
                        break;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

                    for (const link of carLinks) {
                        yield link;
                        await this.delay(); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                    }

                    console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${currentPage + 1}`);
                    currentPage++;
                }

                return; // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
                attempt++;
                console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            } finally {
                await page.close();
                console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
            }
        }

        console.error("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
     */
    async parseListing(url) {
        const page = await this.createPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

            await page.goto(url, { 
                waitUntil: "domcontentloaded", 
                timeout: this.config.timeout 
            });

            console.log("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            // –ñ–¥–µ–º –ª—é–±–æ–π –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (mobile –∏–ª–∏ laptop –≤–µ—Ä—Å–∏—è)
            await page.waitForSelector("h1.text-dark, .car-title", { timeout: 15000 });

            console.log("üìÑ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...");

            // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            const title = await this.safeEval(page, "h1.text-dark", el => el.textContent.trim()) ||
                         await this.safeEval(page, ".car-title", el => el.textContent.trim());

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
            const yearFromTitle = title ? title.match(/\b(202[0-9]|203[0-9])\b/) : null;

            // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            const priceFormatted = await this.safeEval(
                page, 
                "div.price.fs-24.fw-600.text-dark.currency-price-field", 
                el => el.textContent.trim()
            ) || await this.safeEval(
                page, 
                "div.price.currency-price-field", 
                el => el.textContent.trim()
            ) || await this.safeEval(
                page, 
                ".price", 
                el => el.textContent.trim()
            );

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—É –∏ —Å—É–º–º—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "USD 734,200"
            let priceRaw = null;
            let currency = "USD";
            
            if (priceFormatted) {
                const priceMatch = priceFormatted.match(/([A-Z]{3})\s*([\d,]+)/);
                if (priceMatch) {
                    currency = priceMatch[1];
                    priceRaw = parseFloat(priceMatch[2].replace(/,/g, ""));
                }
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è mobile –∏ laptop –≤–µ—Ä—Å–∏–π
            const specifications = await page.evaluate(() => {
                const specs = {};
                const motorParts = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ

                // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π (–∏ mobile, –∏ laptop)
                const specElements = document.querySelectorAll('#item-specifications ul li');

                specElements.forEach(el => {
                    const spans = el.querySelectorAll('span');
                    if (spans.length >= 2) {
                        const key = spans[0].textContent.trim().toLowerCase();
                        const value = spans[spans.length - 1].textContent.trim();

                        // –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π
                        if (key.includes('make')) specs.make = value;
                        else if (key.includes('model')) specs.model = value;
                        else if (key.includes('year') || key.includes('model year')) {
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
                            const yearMatch = value.match(/(\d{4})/);
                            specs.year = yearMatch ? yearMatch[1] : value;
                        }
                        else if (key.includes('Kilometers') || key.includes('mileage')) specs.kilometers = value;
                        else if (key.includes('color') && !key.includes('interior')) specs.exterior_color = value;
                        else if (key.includes('interior color')) specs.interior_color = value;
                        else if (key.includes('transmission')) specs.transmission = value;
                        else if (key.includes('vehicle type')) specs.body_type = value;
                        else if (key.includes('drive type')) specs.drive_type = value;
                        else if (key.includes('seating capacity')) specs.seating_capacity = value;
                        else if (key.includes('number of doors')) specs.doors = value;
                        else if (key.includes('wheel size')) specs.wheel_size = value;
                        
                        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ
                        else if (key.includes('fuel type')) motorParts.push(`Fuel: ${value}`);
                        else if (key.includes('horsepower') || key.includes('power')) {
                            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                            specs.horsepower = value;
                            motorParts.push(`Power: ${value}`);
                        }
                        else if (key.includes('engine capacity')) motorParts.push(`Engine: ${value}`);
                        else if (key.includes('cylinders')) motorParts.push(`Cylinders: ${value}`);
                    }
                });

                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –≤ –æ–¥–Ω–æ –ø–æ–ª–µ
                if (motorParts.length > 0) {
                    specs.motors_trim = motorParts.join(', ');
                }

                return specs;
            });

            // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∏–∑ highlights —Å–µ–∫—Ü–∏–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            console.log("üîç –ü–∞—Ä—Å–∏–º highlights —Å–µ–∫—Ü–∏—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
            
            const highlights = await page.evaluate(() => {
                const highlights = {};
                const motorParts = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ
                
                // –ü–∞—Ä—Å–∏–º mobile –≤–µ—Ä—Å–∏—é highlights
                const mobileHighlights = document.querySelectorAll('#highlights .mobile-only li');
                mobileHighlights.forEach(el => {
                    const text = el.textContent.trim();
                    
                    // –ü–∞—Ä—Å–∏–º –∫–∏–ª–æ–º–µ—Ç—Ä—ã
                    if (text.includes('Km')) {
                        highlights.kilometers = text.match(/(\d+\s*Km)/)?.[1] || null;
                    }
                    
                    // –ü–∞—Ä—Å–∏–º –≥–æ–¥ - –∏—â–µ–º –≤ —Å—Å—ã–ª–∫–∞—Ö –∏ —Ç–µ–∫—Å—Ç–µ
                    const yearLink = el.querySelector('a[title]');
                    if (yearLink && yearLink.getAttribute('title').match(/\d{4}/)) {
                        highlights.year = yearLink.getAttribute('title').match(/(\d{4})/)?.[1] || null;
                    } else if (text.match(/\b(202[0-9]|203[0-9])\b/)) {
                        highlights.year = text.match(/\b(202[0-9]|203[0-9])\b/)?.[1] || null;
                    }
                    
                    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ
                    const fuelLink = el.querySelector('a[title*="Petrol"], a[title*="Diesel"], a[title*="Electric"]');
                    if (fuelLink) {
                        motorParts.push(`Fuel: ${fuelLink.getAttribute('title')}`);
                    } else if (text.includes('Petrol') || text.includes('Diesel') || text.includes('Electric')) {
                        const fuelType = text.match(/(Petrol|Diesel|Electric|Hybrid)/)?.[1];
                        if (fuelType) motorParts.push(`Fuel: ${fuelType}`);
                    }
                    
                    if (text.includes('HP')) {
                        const power = text.match(/(\d+\s*HP)/)?.[1];
                        if (power) {
                            highlights.horsepower = power;
                            motorParts.push(`Power: ${power}`);
                        }
                    }
                    
                    // –¢–∞–∫–∂–µ –∏—â–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    if (text.match(/\d+\s*(HP|hp|Horsepower|horsepower)/)) {
                        const powerMatch = text.match(/(\d+\s*(?:HP|hp|Horsepower|horsepower))/i);
                        if (powerMatch) {
                            highlights.horsepower = powerMatch[1];
                            motorParts.push(`Power: ${powerMatch[1]}`);
                        }
                    }
                    
                    if (text.includes('L')) {
                        const engine = text.match(/(\d+\.?\d*\s*L)/)?.[1];
                        if (engine) motorParts.push(`Engine: ${engine}`);
                    }
                });
                
                // –ü–∞—Ä—Å–∏–º laptop –≤–µ—Ä—Å–∏—é highlights
                const laptopHighlights = document.querySelectorAll('#highlights .laptop-only li');
                laptopHighlights.forEach(el => {
                    const text = el.textContent.trim();
                    
                    // –ü–∞—Ä—Å–∏–º –≥–æ–¥ –º–æ–¥–µ–ª–∏
                    if (text.includes('Model year')) {
                        const yearMatch = text.match(/(\d{4})/);
                        if (yearMatch) {
                            highlights.year = yearMatch[1];
                        }
                    }
                    
                    // –ü–∞—Ä—Å–∏–º –∫–∏–ª–æ–º–µ—Ç—Ä—ã
                    if (text.includes('Kilometers')) {
                        const kmMatch = text.match(/(\d+\s*Km)/);
                        if (kmMatch) {
                            highlights.kilometers = kmMatch[1];
                        }
                    }
                    
                    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –∏–∑ laptop –≤–µ—Ä—Å–∏–∏
                    if (text.includes('Engine capacity')) {
                        const engineMatch = text.match(/(\d+\.?\d*\s*L)/);
                        if (engineMatch) {
                            motorParts.push(`Engine: ${engineMatch[1]}`);
                        }
                    }
                    
                    if (text.includes('Fuel Type') || text.includes('Fuel')) {
                        const fuelMatch = text.match(/(Petrol|Diesel|Electric|Hybrid)/);
                        if (fuelMatch) {
                            motorParts.push(`Fuel: ${fuelMatch[1]}`);
                        }
                    }
                    
                    // –ò—â–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤ laptop –≤–µ—Ä—Å–∏–∏
                    if (text.includes('HP') || text.match(/\d+\s*(HP|hp|Horsepower|horsepower)/)) {
                        const powerMatch = text.match(/(\d+\s*(?:HP|hp|Horsepower|horsepower))/i);
                        if (powerMatch) {
                            highlights.horsepower = powerMatch[1];
                            motorParts.push(`Power: ${powerMatch[1]}`);
                        }
                    }
                });
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –≤ –æ–¥–Ω–æ –ø–æ–ª–µ
                if (motorParts.length > 0) {
                    highlights.motors_trim = motorParts.join(', ');
                }
                
                return highlights;
            });
            
            console.log("üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ highlights:", highlights);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ highlights —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
            // –û—Å–æ–±–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º motors_trim - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ
            if (specifications.motors_trim && highlights.motors_trim) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –≤ –æ–±–µ–∏—Ö —Å–µ–∫—Ü–∏—è—Ö, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
                const existingMotorParts = specifications.motors_trim.split(', ');
                const newMotorParts = highlights.motors_trim.split(', ');
                
                // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                const motorMap = new Map();
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞—Å—Ç–∏
                existingMotorParts.forEach(part => {
                    const [key] = part.split(': ');
                    motorMap.set(key, part);
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–∞—Å—Ç–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
                newMotorParts.forEach(part => {
                    const [key] = part.split(': ');
                    motorMap.set(key, part);
                });
                
                specifications.motors_trim = Array.from(motorMap.values()).join(', ');
            } else if (highlights.motors_trim) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ highlights, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                specifications.motors_trim = highlights.motors_trim;
            }
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            Object.assign(specifications, highlights);
            
            // –ï—Å–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ, –Ω–æ –∏—Ö –Ω–µ—Ç –≤ highlights, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if (specifications.motors_trim && !highlights.motors_trim) {
                // –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ specifications.motors_trim
            } else if (!specifications.motors_trim && highlights.motors_trim) {
                // –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ highlights.motors_trim
            } else if (!specifications.motors_trim && !highlights.motors_trim) {
                // –ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
                const motorParts = [];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö
                if (specifications.fuel_type) motorParts.push(`Fuel: ${specifications.fuel_type}`);
                if (specifications.horsepower) motorParts.push(`Power: ${specifications.horsepower}`);
                if (specifications.engine_capacity) motorParts.push(`Engine: ${specifications.engine_capacity}`);
                if (specifications.cylinders) motorParts.push(`Cylinders: ${specifications.cylinders}`);
                
                if (motorParts.length > 0) {
                    specifications.motors_trim = motorParts.join(', ');
                }
            }

            // –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–¥ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if (!specifications.year && yearFromTitle) {
                specifications.year = yearFromTitle[1];
            }

            const {
                make,
                model,
                year,
                kilometers,
                fuel_type,
                horsepower,
                exterior_color,
                interior_color,
                engine_capacity,
                transmission,
                body_type,
                cylinders,
                drive_type,
                seating_capacity,
                doors,
                wheel_size
            } = specifications;

            // –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ —Å–ª–∞–π–¥–µ—Ä–∞ - –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            const photos = await page.evaluate(() => {
                const images = [];
                
                // –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ª–∞–π–¥–µ—Ä–µ
                const sliderImages = document.querySelectorAll('#car-images-slider img');
                
                sliderImages.forEach(img => {
                    if (img.src && !img.src.includes('data:')) {
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
                        const fullUrl = img.src.startsWith('//') ? 'https:' + img.src : img.src;
                        if (!images.includes(fullUrl)) {
                            images.push(fullUrl);
                        }
                    }
                });
                
                // –ï—Å–ª–∏ –≤ —Å–ª–∞–π–¥–µ—Ä–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                if (images.length === 0) {
                    const altImages = document.querySelectorAll('img[alt*="Rolls-Royce"], img[alt*="Cullinan"], .car-image img, .image-container img');
                    altImages.forEach(img => {
                        if (img.src && !img.src.includes('data:')) {
                            const fullUrl = img.src.startsWith('//') ? 'https:' + img.src : img.src;
                            if (!images.includes(fullUrl)) {
                                images.push(fullUrl);
                            }
                        }
                    });
                }
                
                return images;
            });

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è)
            const main_image = photos.length > 0 ? photos[0] : null;

            // –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            const sellerName = await this.safeEval(
                page, 
                "#seller-info .seller-intro strong", 
                el => el.textContent.trim()
            );

            const sellerLogo = await this.safeEval(
                page, 
                "#seller-info .seller-intro img", 
                img => img.src.startsWith('//') ? 'https:' + img.src : img.src
            );

            const sellerProfileLink = await this.safeEval(
                page, 
                "#seller-info .actions li a", 
                a => a.href
            );

            // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const whatsappHref = await this.safeEval(page, 'a.whatsapp-link', a => a.href);
            const phoneMatch = whatsappHref ? whatsappHref.match(/phone=(\d+)/) : null;
            const phone = phoneMatch ? `+${phoneMatch[1]}` : "–ù–µ —É–∫–∞–∑–∞–Ω";

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ motors_trim –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            let extractedHorsepower = specifications.horsepower || highlights.horsepower || null;
            let extractedFuelType = null;
            
            if (specifications.motors_trim) {
                const motorParts = specifications.motors_trim.split(', ');
                motorParts.forEach(part => {
                    if (part.startsWith('Fuel:')) {
                        extractedFuelType = part.replace('Fuel: ', '');
                    }
                });
            }
            
            // –ï—Å–ª–∏ –º–æ—â–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if (!extractedHorsepower) {
                const titlePowerMatch = title.match(/(\d+(?:\.\d+)?\s*(?:HP|hp|Horsepower|horsepower|BHP|bhp))/i);
                if (titlePowerMatch) {
                    extractedHorsepower = titlePowerMatch[1];
                }
            }
            
            // –ï—Å–ª–∏ –º–æ—â–Ω–æ—Å—Ç—å –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –Ω–∞ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if (!extractedHorsepower) {
                const pagePower = await page.evaluate(() => {
                    // –ò—â–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const powerSelectors = [
                        '[class*="power"]',
                        '[class*="horsepower"]',
                        '[class*="hp"]',
                        '.spec-value',
                        '.spec-item',
                        '.car-specs li',
                        '.specifications li'
                    ];
                    
                    for (const selector of powerSelectors) {
                        const elements = document.querySelectorAll(selector);
                        for (const el of elements) {
                            const text = el.textContent.trim();
                            const powerMatch = text.match(/(\d+(?:\.\d+)?\s*(?:HP|hp|Horsepower|horsepower|BHP|bhp))/i);
                            if (powerMatch) {
                                return powerMatch[1];
                            }
                        }
                    }
                    return null;
                });
                
                if (pagePower) {
                    extractedHorsepower = pagePower;
                }
            }

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            const rawData = {
                short_url: url,
                title,
                photos,
                main_image: main_image,
                make: specifications.make || null,
                model: specifications.model || null,
                year: specifications.year || null,
                body_type: specifications.body_type || null,
                horsepower: extractedHorsepower || null,
                fuel_type: extractedFuelType || null,
                motors_trim: specifications.motors_trim || null,
                kilometers: specifications.kilometers || null,
                exterior_color: specifications.exterior_color || null,
                interior_color: specifications.interior_color || null,
                transmission: specifications.transmission || null,
                drive_type: specifications.drive_type || null,
                seating_capacity: specifications.seating_capacity || null,
                doors: specifications.doors || null,
                wheel_size: specifications.wheel_size || null,
                sellers: {
                    sellerName: sellerName || "–ù–µ —É–∫–∞–∑–∞–Ω",
                    sellerType: "Dealer",
                    sellerLogo: sellerLogo || null,
                    sellerProfileLink: sellerProfileLink || null,
                },
                price: {
                    formatted: priceFormatted,
                    raw: priceRaw,
                    currency,
                },
                location: "Dubai",
                contact: {
                    phone,
                },
            };

            console.log(rawData);
            return rawData;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url}:`, error);
            return null;
        } finally {
            await page.close();
            console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Dubicars
     */
    validateData(data) {
        return super.validateData(data) && 
               data.title && 
               data.title !== "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" &&
               data.price && 
               data.price.raw > 0;
    }
}

module.exports = { DubicarsParser };
