const { DubicarsParser } = require('./DubicarsParser');
const { configLoader } = require('../../ConfigLoader');
const { startBrowser } = require('../../../utils/browser');

/**
 * –ú–æ–¥—É–ª—å –ø–∞—Ä—Å–µ—Ä–∞ Dubicars
 */
class DubicarsModule {
    constructor() {
        this.name = 'Dubicars';
        this.config = this.loadConfig();
        this.parser = new DubicarsParser(this.config);
        this.browser = null;
        this.context = null;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    loadConfig() {
        try {
            const config = configLoader.getConfig('dubicars');
            if (!config) {
                throw new Error(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ${this.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ`);
            }
            return config;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${this.name}:`, error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async* getListings() {
        console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä ${this.name}...`);
        yield* this.parser.getListings();
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
     */
    async parseListing(url) {
        return await this.parser.parseListing(url);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    async initialize() {
        try {
            console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è ${this.name}...`);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
            const browserData = await startBrowser();
            this.browser = browserData;
            this.context = await this.browser.newContext();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–∞
            await this.parser.initialize(this.context);
            
            console.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞: ${this.name}`);
            console.log(`‚úÖ –ú–æ–¥—É–ª—å ${this.name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è ${this.name}:`, error.message);
            return false;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
     */
    async run() {
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä ${this.name}...`);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            const results = await this.parser.run();
            
            console.log(`‚úÖ –ü–∞—Ä—Å–µ—Ä ${this.name} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if (this.browser) {
                await this.browser.close();
            }
            
            return {
                success: true,
                processed: results.length,
                results: results
            };
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ ${this.name}:`, error.message);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (this.browser) {
                await this.browser.close();
            }
            
            return {
                success: false,
                error: error.message,
                processed: 0
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ
     */
    getInfo() {
        return {
            name: this.name,
            baseUrl: this.config.baseUrl,
            timeout: this.config.timeout
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
     */
    async isAvailable() {
        // –ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
        return true;
    }
}

module.exports = { DubicarsModule };
