/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è Dubicars.com
 */

class DubicarsListingParser {
    constructor(config) {
        this.config = config;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Dubicars
        this.listingSelector = 'section#serp-list li.serp-list-item a.image-container';
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        this.scrollContainers = [
            'section#serp-list',
            'main',
            'body'
        ];
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
     */
    async createPage(context) {
        const page = await context.newPage();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        await page.setExtraHTTPHeaders({
            "User-Agent": this.config.userAgent || "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        });

        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!this.config.enableImageLoading) {
            await page.route('**/*', (route) => {
                if (route.request().resourceType() === 'image') {
                    route.abort();
                } else {
                    route.continue();
                }
            });
        }

        return page;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async* getListings(context) {
        let attempt = 0;
        let currentPage = 1;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage(context);

            try {
                console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ Dubicars...");

                while (true) {
                    const url = this.config.listingsUrl.replace('{page}', currentPage);
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: this.config.timeout 
                    });

                    // –ñ–¥—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
                    await page.waitForSelector(this.listingSelector, { timeout: 30000 });

                    // –°–∫—Ä–æ–ª–ª–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                    await this.autoScroll(page);
                    await page.waitForTimeout(2000);

                    // –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
                    let carLinks = [];
                    
                    try {
                        carLinks = await page.$$eval(
                            this.listingSelector,
                            (elements, baseUrl) =>
                                elements
                                    .map((el) => el.getAttribute("href"))
                                    .filter((href) => href && href.startsWith(baseUrl)),
                            this.config.baseUrl
                        );
                        
                        if (carLinks.length > 0) {
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º`);
                        }
                    } catch (error) {
                        console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", error.message);
                    }

                    if (carLinks.length === 0) {
                        console.warn(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        const pageContent = await page.evaluate(() => document.body.textContent);
                        if (pageContent.length < 1000) {
                            console.warn(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –≤—ã–≥–ª—è–¥–∏—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
                            break;
                        }
                        
                        // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage + 1}...`);
                        currentPage++;
                        continue;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if (carLinks.length > 0) {
                        console.log(`üîó –ü–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}:`);
                        carLinks.slice(0, 3).forEach((link, index) => {
                            console.log(`   ${index + 1}. ${link}`);
                        });
                    }

                    for (const link of carLinks) {
                        yield link;
                    }
                    currentPage++;
                }

                break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}:`, error);
                attempt++;
                
                if (attempt >= this.config.maxRetries) {
                    throw error;
                }
                
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.maxRetries}...`);
                await this.sleep(this.config.retryDelay);
            } finally {
                await page.close();
            }
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async autoScroll(page) {
        await page.evaluate(async (scrollContainers) => {
            const container = scrollContainers.find(c => document.querySelector(c) !== null);
            if (!container) return;

            const scrollElement = document.querySelector(container);
            if (!scrollElement) return;

            await new Promise((resolve) => {
                let lastScrollHeight = 0;
                let attemptsWithoutChange = 0;

                const interval = setInterval(() => {
                    scrollElement.scrollBy(0, 300);

                    const currentHeight = scrollElement.scrollHeight;
                    if (currentHeight !== lastScrollHeight) {
                        attemptsWithoutChange = 0;
                        lastScrollHeight = currentHeight;
                    } else {
                        attemptsWithoutChange++;
                    }

                    // –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ 3 "–ø—É—Å—Ç—ã—Ö" —Å–∫—Ä–æ–ª–ª–æ–≤
                    if (attemptsWithoutChange >= 3) {
                        clearInterval(interval);
                        resolve();
                    }
                }, 400);
            });
        }, this.scrollContainers);
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—É–∑—ã
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = { DubicarsListingParser };
