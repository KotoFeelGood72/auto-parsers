/**
 * –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è Dubizzle.com
 */

class DubizzleListingParser {
    constructor(config) {
        this.config = config;
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è Dubizzle
        // –°–∞–º —ç–ª–µ–º–µ–Ω—Ç —Å data-testid –Ø–í–õ–Ø–ï–¢–°–Ø —Å—Å—ã–ª–∫–æ–π <a>
        this.listingSelector = '#listings-top a[data-testid^="listing-"]';
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        this.scrollContainers = [
            'main',
            '[data-testid="search-results"]',
            "body"
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async* getListings(context) {
        let attempt = 0;
        let currentPage = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å page=1, page=0 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        while (attempt < this.config.maxRetries) {
            let page = null;

            try {
                page = await context.newPage();
                console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ Dubizzle...");

                while (true) {
                    // URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º page, –Ω–∞—á–∏–Ω–∞—è —Å 0
                    const url = `${this.config.listingsUrl}?page=${currentPage}`;
                    console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

                    await page.goto(url, { 
                        waitUntil: "domcontentloaded", 
                        timeout: 90000 
                    });

                    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    await page.waitForTimeout(5000);

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    let carLinks = [];
                    
                    try {
                        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏
                        await page.waitForSelector('#listings-top', { timeout: 30000 });
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ - —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-testid —Å–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Å—Å—ã–ª–∫–∞–º–∏
                        carLinks = await page.$$eval(
                            this.listingSelector,
                            (anchors) => anchors.map((a) => a.href).filter(Boolean)
                        );
                        
                        if (carLinks.length > 0) {
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                        } else {
                            // Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                            const debug = await page.evaluate(() => {
                                const container = document.querySelector('#listings-top');
                                const listings = container ? container.querySelectorAll('[data-testid^="listing-"]') : [];
                                const count = listings.length;
                                let linksInFirst = 0;
                                if (listings.length > 0) {
                                    const firstListing = listings[0];
                                    linksInFirst = firstListing.querySelectorAll('a').length;
                                }
                                return { 
                                    hasContainer: !!container, 
                                    listingsCount: count,
                                    linksInFirstListing: linksInFirst
                                };
                            });
                            console.log(`‚ö†Ô∏è Debug: ${JSON.stringify(debug)}`);
                        }
                    } catch (error) {
                        console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", error.message);
                    }

                    if (carLinks.length === 0) {
                        console.warn(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                        const pageContent = await page.evaluate(() => document.body.textContent);
                        if (pageContent.length < 1000) {
                            console.warn(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –≤—ã–≥–ª—è–¥–∏—Ç –ø—É—Å—Ç–æ–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ`);
                            break;
                        }
                        
                        // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage + 1}...`);
                        currentPage++;
                        
                        // –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                        if (currentPage >= 50) {
                            console.log("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (50)");
                            break;
                        }
                        continue;
                    }

                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if (carLinks.length > 0) {
                        console.log(`üîó –ü–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}:`);
                        carLinks.slice(0, 3).forEach((link, index) => {
                            console.log(`   ${index + 1}. ${link}`);
                        });
                    }

                    // –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
                    for (const link of carLinks) {
                        yield link;
                    }
                    
                    currentPage++;
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                    if (currentPage >= 50) {
                        console.log("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (50)");
                        break;
                    }
                }

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                if (page) {
                    await page.close();
                    page = null;
                }
                break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}:`, error);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if (page) {
                    await page.close();
                    page = null;
                }
                
                attempt++;
                
                if (attempt >= this.config.maxRetries) {
                    throw error;
                }
                
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.maxRetries}...`);
                await this.sleep(this.config.retryDelay || 5000);
            }
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async autoScroll(page) {
        await page.evaluate(async (scrollContainers) => {
            const container = scrollContainers.find(c => document.querySelector(c) !== null);
            if (!container) return;

            const scrollElement = document.querySelector(container);
            if (!scrollElement) return;

            await new Promise((resolve) => {
                let lastScrollHeight = 0;
                let attemptsWithoutChange = 0;

                const interval = setInterval(() => {
                    scrollElement.scrollBy(0, 300);

                    const currentHeight = scrollElement.scrollHeight;
                    if (currentHeight !== lastScrollHeight) {
                        attemptsWithoutChange = 0;
                        lastScrollHeight = currentHeight;
                    } else {
                        attemptsWithoutChange++;
                    }

                    // –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Å–ª–µ 3 "–ø—É—Å—Ç—ã—Ö" —Å–∫—Ä–æ–ª–ª–æ–≤
                    if (attemptsWithoutChange >= 3) {
                        clearInterval(interval);
                        resolve();
                    }
                }, 400);
            });
        }, this.scrollContainers);
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—É–∑—ã
     */
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = { DubizzleListingParser };
