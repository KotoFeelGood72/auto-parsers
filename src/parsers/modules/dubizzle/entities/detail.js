/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è Dubizzle.com
 */

class DubizzleDetailParser {
    constructor(config) {
        this.config = config;
        
        // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã Dubizzle
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, —Ç–∞–∫ –∫–∞–∫ data-testid –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        this.selectors = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            title: 'h1, [class*="title"], [class*="ad-title"]',
            price: '[class*="price"], [class*="amount"]',
            location: '[class*="location"], [class*="address"]',
            
            // –î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è - –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ —Å–ø–∏—Å–∫–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
            specsContainer: '[class*="spec"], [class*="details"], [class*="attributes"]',
            
            // –ü—Ä–æ–¥–∞–≤–µ—Ü
            sellerInfo: '[class*="seller"], [class*="dealer"]',
            
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images: 'img[class*="car"], img[class*="photo"]',
            mainImage: 'img[class*="main"], [class*="main-image"] img'
        };
        
        // –ü–æ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.dataFields = {
            make: ['Make', '–ú–∞—Ä–∫–∞', 'Brand', 'brand'],
            model: ['Model', '–ú–æ–¥–µ–ª—å', 'Car Model', 'car model'],
            bodyType: ['Body type', 'Body Type', '–¢–∏–ø –∫—É–∑–æ–≤–∞', 'body type', 'Body', 'body'],
            fuelType: ['Fuel Type', '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞', 'Fuel', 'fuel', 'Fuel type', 'fuel type'],
            transmission: ['Transmission', '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á', 'Gear', 'gear'],
            color: ['Color', '–¶–≤–µ—Ç', 'Exterior Color', 'exterior color']
        };
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     */
    async parseCarDetails(url, context) {
        const page = await context.newPage();

        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);
            
            await page.setExtraHTTPHeaders({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            });

            await page.goto(url, {
                waitUntil: "domcontentloaded",
                timeout: 15000
            });

            console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            await page.waitForTimeout(3000);
            
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É
            let phoneNumber = "–ù–µ —É–∫–∞–∑–∞–Ω";
            try {
                // –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Call" –∏–ª–∏ "Show Phone"
                let callButton = await page.$('[data-testid="call-cta-button"]');
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                if (!callButton) {
                    const buttons = await page.$$('button');
                    for (const button of buttons) {
                        const text = await button.textContent();
                        if (text && (text.includes('Call') || text.includes('Show') || text.includes('Phone'))) {
                            callButton = button;
                            break;
                        }
                    }
                }
                
                if (callButton) {
                    console.log("üîç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Call, –∫–ª–∏–∫–∞–µ–º...");
                    await callButton.click();
                    await page.waitForTimeout(1000);
                    
                    // –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    const phoneText = await page.evaluate(() => {
                        // –ò—â–µ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                        let phone = null;
                        
                        // –ò—â–µ–º –ø–æ data-testid
                        const phoneEl = document.querySelector('[data-testid="phone-number"]');
                        if (phoneEl) {
                            const pTag = phoneEl.querySelector('p');
                            if (pTag) {
                                phone = pTag.textContent?.trim();
                            } else {
                                phone = phoneEl.textContent?.trim();
                            }
                        }
                        
                        // –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å—É
                        if (!phone) {
                            const phoneByClass = document.querySelector('.phone-number, [class*="phone"], [class*="Phone"]');
                            if (phoneByClass) {
                                phone = phoneByClass.textContent?.trim();
                            }
                        }
                        
                        // –ò—â–µ–º –≤ aria-label
                        if (!phone) {
                            const phoneByAria = document.querySelector('[aria-label*="phone" i], [aria-label*="Phone" i]');
                            if (phoneByAria) {
                                phone = phoneByAria.textContent?.trim();
                            }
                        }
                        
                        // –ò—â–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        if (!phone) {
                            const allText = document.body.textContent;
                            const phoneRegex = /(\+971|971|0)?\s*\d{3}\s*\d{3}\s*\d{4}/g;
                            const matches = allText.match(phoneRegex);
                            if (matches && matches.length > 0) {
                                phone = matches[0].replace(/\s+/g, '');
                            }
                        }
                        
                        return phone;
                    });
                    
                    if (phoneText && phoneText !== '') {
                        // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤
                        const cleanPhone = phoneText.replace(/[^\d+]/g, '').trim();
                        if (cleanPhone) {
                            phoneNumber = cleanPhone;
                            console.log("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω:", phoneNumber);
                        }
                    }
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    try {
                        const closeButton = await page.$('[data-testid="close-button"], button[aria-label="Close"], .close-button, [class*="close"]');
                        if (closeButton) {
                            await closeButton.click();
                            await page.waitForTimeout(300);
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
                    }
                }
                
                // –ú–µ—Ç–æ–¥ 2: –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—â–µ–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if (phoneNumber === "–ù–µ —É–∫–∞–∑–∞–Ω") {
                    console.log("üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...");
                    const directPhone = await page.evaluate(() => {
                        // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ —Å tel:
                        const telLinks = Array.from(document.querySelectorAll('a[href^="tel:"]'));
                        if (telLinks.length > 0) {
                            const href = telLinks[0].getAttribute('href');
                            return href.replace('tel:', '').replace(/[^\d+]/g, '');
                        }
                        
                        // –ò—â–µ–º –≤ –∫–Ω–æ–ø–∫–∞—Ö –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ
                        const phoneRegex = /(\+971|971|0)?\s*(\d{3})\s*(\d{3})\s*(\d{4})/;
                        const bodyText = document.body.textContent;
                        const match = bodyText.match(phoneRegex);
                        if (match) {
                            return match[0].replace(/\s+/g, '');
                        }
                        
                        return null;
                    });
                    
                    if (directPhone) {
                        phoneNumber = directPhone;
                        console.log("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω (–º–µ—Ç–æ–¥ 2):", phoneNumber);
                    }
                }
                
                // –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
                if (phoneNumber === "–ù–µ —É–∫–∞–∑–∞–Ω") {
                    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ–¥–∞–≤—Ü–∞...");
                    try {
                        const sellerSection = await page.$('[data-testid="seller-info"], [class*="seller"]');
                        if (sellerSection) {
                            const sellerPhone = await sellerSection.evaluate((el) => {
                                const phoneRegex = /(\+971|971|0)?\s*(\d{3})\s*(\d{3})\s*(\d{4})/;
                                const match = el.textContent.match(phoneRegex);
                                return match ? match[0].replace(/\s+/g, '') : null;
                            });
                            
                            if (sellerPhone) {
                                phoneNumber = sellerPhone;
                                console.log("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞:", phoneNumber);
                            }
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    }
                }
                
            } catch (error) {
                console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error.message);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            const pageData = await page.evaluate(() => {
                const data = {};
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º title - –∏—Å–ø–æ–ª—å–∑—É–µ–º listing-name
                const titleEl = document.querySelector('[data-testid="listing-name"]');
                data.title = titleEl?.textContent?.trim() || '';
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º listing-price
                const priceEl = document.querySelector('[data-testid="listing-price"]');
                data.price = priceEl?.textContent?.trim() || '';
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ listing-sub-heading
                const modelEl = document.querySelector('[data-testid="listing-sub-heading"]');
                data.model = modelEl?.textContent?.trim() || '';
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
                const locationEl = document.querySelector('[data-testid="listing-location-map"]');
                data.location = locationEl?.textContent?.trim() || '';
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
                const yearEl = document.querySelector('[data-testid="listing-year-value"]');
                data.year = yearEl?.textContent?.trim() || '';
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–±–µ–≥
                const kmEl = document.querySelector('[data-testid="listing-kilometers-value"]');
                data.kilometers = kmEl?.textContent?.trim() || '';
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ overview
                data.specs = {};
                const overviewLabels = document.querySelectorAll('[data-testid^="overview-"][data-testid$="-label"]');
                overviewLabels.forEach(label => {
                    const testid = label.getAttribute('data-testid');
                    const fieldName = testid.replace('overview-', '').replace('-label', '');
                    const valueEl = document.querySelector(`[data-testid="overview-${fieldName}-value"]`);
                    if (valueEl) {
                        data.specs[fieldName] = valueEl.textContent?.trim() || '';
                    }
                });
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ URL
                const urlMatch = window.location.href.match(/\/motors\/used-cars\/([^\/]+)\/([^\/]+)/);
                if (urlMatch) {
                    data.urlMake = urlMatch[1];
                    data.urlModel = urlMatch[2];
                }
                
                // –ì–æ–¥ –∏–∑ URL —Ç–æ–∂–µ
                const urlYearMatch = window.location.href.match(/\/\d{4}\//);
                if (urlYearMatch) {
                    data.urlYear = urlYearMatch[0].replace(/\//g, '');
                }
                
                // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                const images = Array.from(document.querySelectorAll('img[data-testid*="image"]'));
                data.photos = images
                    .map(img => img.src || img.getAttribute('src'))
                    .filter(src => src && (src.includes('dubizzle.com') || src.includes('cloudfront.net') || src.includes('dbz-images')))
                    .slice(0, 20);
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
                const sellerNameEl = document.querySelector('[data-testid="name"]');
                data.sellerName = sellerNameEl?.textContent?.trim() || '';
                
                const sellerTypeEl = document.querySelector('[data-testid="type"]');
                data.sellerType = sellerTypeEl?.textContent?.trim() || '';
                
                const sellerLogoEl = document.querySelector('[data-testid="logo"] img');
                data.sellerLogo = sellerLogoEl?.src || sellerLogoEl?.getAttribute('src') || null;
                
                // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π data-testid
                const sellerProfileLinkEl = document.querySelector('[data-testid="view-all-cars"]');
                if (sellerProfileLinkEl) {
                    const relativePath = sellerProfileLinkEl.getAttribute('href');
                    data.sellerProfileLink = relativePath ? new URL(relativePath, window.location.origin).href : null;
                } else {
                    data.sellerProfileLink = null;
                }
                
                return data;
            });
            
            // –ü–∞—Ä—Å–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const title = pageData.title || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
            const priceText = pageData.price || "";
            const priceFormatted = priceText.replace(/[^\d,]/g, "").trim();
            const priceRaw = priceFormatted ?
                parseFloat(priceFormatted.replace(/,/g, "").replace(/\s+/g, "")) :
                0;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL
            const make = pageData.urlMake || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const modelFromUrl = pageData.urlModel || "";
            const model = pageData.model || modelFromUrl || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥
            const year = pageData.year || pageData.urlYear || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            
            // –ü—Ä–æ–±–µ–≥ –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const kilometers = pageData.kilometers || "0";
            
            const location = pageData.location || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            const bodyType = pageData.specs['body_type'] || pageData.specs['body type'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const fuelType = pageData.specs['fuel_type'] || pageData.specs['fuel type'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const transmission = pageData.specs['transmission_type'] || pageData.specs['transmission type'] || pageData.specs['transmission'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const motorsTrim = pageData.specs['motors_trim'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const exteriorColor = pageData.specs['exterior_color'] || pageData.specs['exterior color'] || pageData.specs['color'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const horsepower = pageData.specs['horsepower'] || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            
            // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            const sellerName = pageData.sellerName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
            const sellerType = pageData.sellerType || "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ";
            const sellerLogo = pageData.sellerLogo || null;
            const sellerProfileLink = pageData.sellerProfileLink || null;
            // phoneNumber –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ pageData
            const photos = pageData.photos || [];
            const mainImage = photos.length > 0 ? photos[0] : null;

            // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            const carDetails = {
                short_url: url,
                title,
                photos,
                main_image: mainImage,
                make,
                model,
                year,
                body_type: bodyType,
                horsepower,
                fuel_type: fuelType,
                motors_trim: motorsTrim,
                kilometers,
                sellers: {
                    sellerName,
                    sellerType,
                    sellerLogo,
                    sellerProfileLink,
                },
                price: {
                    formatted: priceFormatted,
                    raw: priceRaw,
                    currency: "AED",
                },
                exterior_color: exteriorColor,
                location,
                contact: {
                    phone: phoneNumber,
                },
            };

            console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã");
            return carDetails;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
            return null;
        } finally {
            await page.close();
        }
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ eval –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     */
    async safeEval(page, selector, fn) {
        try {
            return await page.$eval(selector, fn);
        } catch {
            return null;
        }
    }

    /**
     * –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
     */
    pick(map, keys, def = null) {
        for (const k of keys) {
            if (map[k] != null) return map[k];
        }
        return def;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ pageData
     */
    extractSpec(pageData, keywords) {
        if (!pageData.specs) return null;
        
        for (const keyword of keywords) {
            for (const [key, value] of Object.entries(pageData.specs)) {
                if (key.includes(keyword) && value) {
                    return value;
                }
            }
        }
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ make/model/year
     */
    extractMakeModelYear(pageData, type) {
        if (!pageData.specs) return null;
        
        const keywords = {
            make: ['make', '–º–∞—Ä–∫–∞', 'brand'],
            model: ['model', '–º–æ–¥–µ–ª—å'],
            year: ['year', '–≥–æ–¥', '–≥–æ–¥–∞']
        };
        
        return this.extractSpec(pageData, keywords[type] || []);
    }
}

module.exports = { DubizzleDetailParser };
