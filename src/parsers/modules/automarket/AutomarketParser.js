const { BaseParser } = require('../../BaseParser');
const { saveData } = require('../../../utils/saveData');

/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ Dubizzle.com (automarket)
 * –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ConfigParser
 */
class AutomarketParser extends BaseParser {
    constructor(config = {}) {
        super('Automarket', {
            baseUrl: 'https://uae.dubizzle.com',
            listingsUrl: 'https://uae.dubizzle.com/motors/used-cars/',
            timeout: 90000,
            delayBetweenRequests: 1000,
            maxRetries: 3,
            enableImageLoading: false,
            ...config
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async* getListings() {
        let attempt = 0;

        while (attempt < this.config.maxRetries) {
            const page = await this.createPage();

            try {
                console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ Dubizzle...");

                await page.setExtraHTTPHeaders({
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                });

                await page.goto(this.config.listingsUrl, {
                    waitUntil: "domcontentloaded",
                    timeout: this.config.timeout,
                });

                console.log("üìÑ –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±—Ä–µ–Ω–¥—ã...");
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
                let brandLinks = [];
                const possibleSelectors = [
                    ".tagList a",
                    ".brands-list a",
                    ".brand-filter a",
                    "a[href*='/motors/used-cars/']"
                ];
                
                for (const selector of possibleSelectors) {
                    try {
                        await page.waitForSelector(selector, { timeout: 10000 });
                        brandLinks = await page.$$eval(selector, (elements) =>
                            elements.map((el) => el.getAttribute("href")).filter((href) => href !== null)
                        );
                        if (brandLinks.length > 0) {
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${brandLinks.length} –±—Ä–µ–Ω–¥–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                            break;
                        }
                    } catch (error) {
                        console.log(`‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                }

                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${brandLinks.length} –±—Ä–µ–Ω–¥–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...`);
                console.log(`üîç –ü–µ—Ä–≤—ã–µ 5 –±—Ä–µ–Ω–¥–æ–≤:`, brandLinks.slice(0, 5));

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 3)
                const brandsToProcess = brandLinks.slice(0, 3);
                console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ ${brandsToProcess.length} –±—Ä–µ–Ω–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);

                for (const brandLink of brandsToProcess) {
                    const fullBrandUrl = `${this.config.baseUrl}${brandLink}`;
                    console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±—Ä–µ–Ω–¥: ${fullBrandUrl}`);
                    await page.goto(fullBrandUrl, { waitUntil: "domcontentloaded", timeout: this.config.timeout });

                    let currentPage = 1;
                    let totalListingsForBrand = 0;
                    
                    while (true) {
                        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage} –¥–ª—è –±—Ä–µ–Ω–¥–∞ ${fullBrandUrl}...`);
                        
                        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                        let links = [];
                        const listingSelectors = [
                            '[data-testid^="listing-"]',
                            '.listing-item a',
                            '.ad-item a',
                            'a[href*="/motors/used-cars/"]'
                        ];
                        
                        for (const selector of listingSelectors) {
                            try {
                                await page.waitForSelector(selector, { timeout: 10000 });
                                links = await page.$$eval(selector, (elements) =>
                                    elements.map((el) => el.getAttribute("href")).filter((href) => href !== null)
                                );
                                if (links.length > 0) {
                                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${links.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                                    break;
                                }
                            } catch (error) {
                                console.log(`‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π ${selector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                            }
                        }

                        if (links.length === 0) {
                            console.warn(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –±—Ä–µ–Ω–¥–∞ ${fullBrandUrl}`);
                            break;
                        }

                        for (const link of links) {
                            yield `${this.config.baseUrl}${link}`;
                            totalListingsForBrand++;
                        }

                        console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}: –Ω–∞–π–¥–µ–Ω–æ ${links.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤—Å–µ–≥–æ –¥–ª—è –±—Ä–µ–Ω–¥–∞: ${totalListingsForBrand})`);

                        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
                        let nextButton = null;
                        const nextButtonSelectors = [
                            '[data-testid="page-next"]',
                            '.pagination .next',
                            '.pagination a[href*="page="]',
                            'a[aria-label="Next"]',
                            'a[title="Next"]'
                        ];
                        
                        for (const selector of nextButtonSelectors) {
                            nextButton = await page.$(selector);
                            if (nextButton) {
                                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                                break;
                            }
                        }
                        
                        if (!nextButton) {
                            console.log(`üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–µ–Ω–¥–∞ ${fullBrandUrl}. –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${totalListingsForBrand}`);
                            break;
                        }

                        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        let nextPageNumber = null;
                        try {
                            const href = await nextButton.getAttribute("href");
                            if (href) {
                                const match = href.match(/page=(\d+)/);
                                nextPageNumber = match ? parseInt(match[1], 10) : null;
                            }
                        } catch (error) {
                            console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1");
                            nextPageNumber = currentPage + 1;
                        }

                        if (!nextPageNumber || nextPageNumber <= currentPage) {
                            console.log(`üèÅ –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç –¥–ª—è –±—Ä–µ–Ω–¥–∞ ${fullBrandUrl}. –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${totalListingsForBrand}`);
                            break;
                        }

                        console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${nextPageNumber} –¥–ª—è –±—Ä–µ–Ω–¥–∞ ${fullBrandUrl}...`);
                        await page.goto(`${fullBrandUrl}?page=${nextPageNumber}`, { waitUntil: "domcontentloaded", timeout: this.config.timeout });
                        currentPage = nextPageNumber;
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                        await this.delay(this.config.delayBetweenRequests);
                    }
                }

                return; // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
                attempt++;
                
                if (attempt < this.config.maxRetries) {
                    console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...");
                    await this.restartBrowser();
                }
            } finally {
                await page.close();
            }
        }

        console.error("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
     */
    async parseListing(url) {
        const page = await this.createPage();
        
        try {
            console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

            await page.setExtraHTTPHeaders({
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            });

            await page.goto(url, {
                waitUntil: "domcontentloaded",
                timeout: this.config.timeout,
            });

            console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

            await page.waitForFunction(() => {
                const elem = document.querySelector('[data-testid="listing-price"]');
                return elem && elem.innerText.trim().length > 0;
            }, { timeout: 5000 });

            // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            const safeEval = async (selector, callback) => {
                try {
                    return await page.$eval(selector, callback);
                } catch (error) {
                    return null;
                }
            };

            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const title = await safeEval('[data-testid="listing-sub-heading"]', el => el.innerText.trim());
            const make = await safeEval('[data-testid="listing-sub-heading"]', el => el.innerText.split(" ")[0].trim());
            const model = await safeEval('[data-testid="listing-sub-heading"]', el => el.innerText.split(" ")[1].trim());
            const year = await safeEval('[data-testid="listing-year-value"]', el => el.innerText.trim());
            const bodyType = await safeEval('[data-testid="overview-body_type-value"]', el => el.innerText.trim());
            const horsepower = await safeEval('[data-testid="overview-horsepower-value"]', el => el.innerText.trim());
            const fuelType = await safeEval('[data-testid="overview-fuel_type-value"]', el => el.innerText.trim());
            const motorsTrim = await safeEval('[data-testid="overview-transmission_type-value"]', el => el.innerText.trim());
            const kilometers = await safeEval('[data-testid="listing-kilometers-value"]', el => el.innerText.trim().replace(/\D/g, ""));
            const exteriorColor = await safeEval('[data-testid="overview-exterior_color-value"]', el => el.innerText.trim());
            const location = await safeEval('[data-testid="listing-location-map"]', el => el.innerText.trim());

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
            const priceFormatted = await safeEval('[data-testid="listing-price"] span', el => el.innerText.trim().replace("AED", "").trim());
            const priceRaw = priceFormatted ? parseFloat(priceFormatted.replace(/,/g, "")) : null;
            const currency = "AED";

            // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            let sellerName = "–ù–µ —É–∫–∞–∑–∞–Ω";
            let sellerType = "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ";
            let sellerLogo = null;
            let sellerProfileLink = null;

            try {
                console.log("‚åõ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–ª–æ–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞...");
                await page.waitForSelector('[data-testid="name"]', { timeout: 5000 });

                sellerName = await safeEval('[data-testid="name"]', el => el.innerText.trim());
                sellerType = await safeEval('[data-testid="type"]', el => el.innerText.trim());
                sellerLogo = await safeEval('[data-testid="logo"] img', el => el.src);

                const sellerProfileElement = await page.$('[data-testid="view-all-cars"]');
                if (sellerProfileElement) {
                    sellerProfileLink = await safeEval('[data-testid="view-all-cars"]', el => el.href);
                }

                console.log(`üè¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${sellerName} (${sellerType})`);
            } catch (error) {
                console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:", error);
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            let phoneNumber = null;
            try {
                const callButton = page.locator('[data-testid="call-cta-button"]').first();
                const callButtonCount = await callButton.count();

                if (callButtonCount > 0) {
                    console.log(`üìû –ù–∞–π–¥–µ–Ω–æ ${callButtonCount} –∫–Ω–æ–ø–æ–∫ –≤—ã–∑–æ–≤–∞. –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–π...`);

                    let clicked = false;
                    for (let attempt = 1; attempt <= 3; attempt++) {
                        try {
                            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}...`);
                            await callButton.scrollIntoViewIfNeeded();
                            await page.waitForTimeout(2000);
                            await callButton.click();
                            clicked = true;
                            console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ 'Call'");
                            break;
                        } catch (error) {
                            console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—à–∏–±–∫–∞:`, error);
                            await page.waitForTimeout(2000);
                        }
                    }

                    if (clicked) {
                        console.log("‚åõ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...");
                        const modal = page.locator(".MuiDialog-container");
                        await modal.waitFor({ state: "visible", timeout: 10000 });
                        console.log("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ!");

                        const phoneNumberLocator = modal.locator('[data-testid="phone-number"] p');
                        await phoneNumberLocator.waitFor({ state: "visible", timeout: 5000 });
                        phoneNumber = await phoneNumberLocator.innerText();
                        console.log(`üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneNumber}`);

                        const closeButton = modal.locator('[data-testid="close-button"]');
                        if ((await closeButton.count()) > 0) {
                            await closeButton.click();
                            await page.waitForTimeout(5000);
                            console.log("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.");
                        }
                    }
                } else {
                    console.warn("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
                }
            } catch (error) {
                console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", error);
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            let photos = [];
            try {
                const mainImageSelector = ".MuiImageListItem-standard";
                await page.waitForSelector(mainImageSelector, { timeout: 10000 });

                let clicked = false;
                for (let attempt = 0; attempt < 3; attempt++) {
                    console.log(`üì∏ –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ #${attempt + 1}...`);

                    const mainImage = await page.$(mainImageSelector);
                    if (!mainImage) {
                        console.warn("‚ö†Ô∏è –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ, –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ...");
                        await page.waitForTimeout(1000);
                        continue;
                    }

                    try {
                        await mainImage.hover();
                        await page.waitForTimeout(500);
                        await mainImage.click({ delay: 200 });
                        clicked = true;
                        break;
                    } catch (error) {
                        console.warn("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...");
                        await page.waitForTimeout(1000);
                    }
                }

                if (clicked) {
                    console.log("üì∏ –ö–ª–∏–∫–Ω—É–ª–∏, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–∞–ª–∫–∏...");
                    await page.waitForSelector(".MuiModal-root", { timeout: 5000 });

                    await page.waitForFunction(() => {
                        const modal = document.querySelector(".MuiModal-root");
                        return modal && modal.querySelectorAll(".MuiImageList-root img").length > 0;
                    }, { timeout: 5000 });

                    photos = await page.evaluate(() => {
                        return Array.from(document.querySelectorAll(".MuiModal-root .MuiImageList-root img"))
                            .map((img) => img.src)
                            .filter((src) => src.includes(".jpeg") || src.includes(".jpg") || src.includes(".png"));
                    });

                    console.log(`üì∏ –°–æ–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${photos.length}`);
                }
            } catch (error) {
                console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", error);
            }

            // –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ)
            const mainImage = photos && photos.length > 0 ? photos[0] : null;

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
            const carDetails = {
                short_url: url,
                title: title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                photos: photos || [],
                main_image: mainImage,
                make: make || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                model: model || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                year: year || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                body_type: bodyType || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                horsepower: horsepower || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                fuel_type: fuelType || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                motors_trim: motorsTrim || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                kilometers: parseInt(kilometers, 10) || 0,
                // –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–Ω
                price_formatted: priceFormatted || "0",
                price_raw: priceRaw || 0,
                currency: currency,
                exterior_color: exteriorColor || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                location: location || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                // –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                phone: phoneNumber || "–ù–µ —É–∫–∞–∑–∞–Ω",
                // –ü–ª–æ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                seller_name: sellerName || "–ù–µ —É–∫–∞–∑–∞–Ω",
                seller_type: sellerType || "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ",
                seller_logo: sellerLogo || null,
                seller_profile_link: sellerProfileLink || null,
            };

            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–ª—è: ${title}`);
            return carDetails;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
            return null;
        } finally {
            await page.close();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async run() {
        const results = [];
        
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä ${this.name}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –ø–∞—Ä—Å–∏–º –∫–∞–∂–¥–æ–µ
            for await (const listingUrl of this.getListings()) {
                console.log(`üöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${listingUrl}`);
                
                try {
                    const carDetails = await this.parseListing(listingUrl);
                    if (carDetails) {
                        results.push(carDetails);
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
                        await this.saveData(carDetails);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${listingUrl}:`, error);
                }
            }
            
            console.log(`‚úÖ –ü–∞—Ä—Å–µ—Ä ${this.name} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            return results;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ ${this.name}:`, error.message);
            throw error;
        } finally {
            await this.cleanup();
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
     * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ BaseParser –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –ø–æ–ª–µ–π Automarket
     */
    normalizeData(rawData) {
        return {
            short_url: rawData.short_url || null,
            title: rawData.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            make: rawData.make || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            model: rawData.model || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            year: rawData.year || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            body_type: rawData.body_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            horsepower: rawData.horsepower || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            fuel_type: rawData.fuel_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            motors_trim: rawData.motors_trim || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            kilometers: parseInt(rawData.kilometers, 10) || 0,
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ü–µ–Ω - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è, –∑–∞—Ç–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
            price_formatted: rawData.price_formatted || rawData.price?.formatted || "0",
            price_raw: rawData.price_raw || rawData.price?.raw || 0,
            currency: rawData.currency || rawData.price?.currency || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            exterior_color: rawData.exterior_color || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            location: rawData.location || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è, –∑–∞—Ç–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
            phone: rawData.phone || rawData.contact?.phone || "–ù–µ —É–∫–∞–∑–∞–Ω",
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è, –∑–∞—Ç–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ
            seller_name: rawData.seller_name || rawData.sellers?.sellerName || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            seller_type: rawData.seller_type || rawData.sellers?.sellerType || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            seller_logo: rawData.seller_logo || rawData.sellers?.sellerLogo || null,
            seller_profile_link: rawData.seller_profile_link || rawData.sellers?.sellerProfileLink || null,
            main_image: rawData.main_image || null,
            photos: rawData.photos || []
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
     */
    async saveData(carDetails) {
        try {
            // –î–∞–Ω–Ω—ã–µ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –ø–∞—Ä—Å–µ—Ä–µ, –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
            await saveData(carDetails);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`, error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Å–µ—Ä–µ
     */
    getInfo() {
        return {
            name: this.name,
            baseUrl: this.config.baseUrl,
            listingsUrl: this.config.listingsUrl,
            timeout: this.config.timeout
        };
    }
}

module.exports = { AutomarketParser };
