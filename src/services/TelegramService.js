const axios = require('axios');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —Å—Ç–∞—Ç—É—Å–µ –ø–∞—Ä—Å–µ—Ä–æ–≤
 */
class TelegramService {
    constructor(config = {}) {
        this.config = {
            botToken: process.env.TELEGRAM_BOT_TOKEN || '',
            chatId: process.env.TELEGRAM_CHAT_ID || '',
            apiUrl: 'https://api.telegram.org/bot',
            timeout: 10000,
            retryAttempts: 3,
            retryDelay: 1000,
            enableNotifications: true,
            rateLimitDelay: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            ...config
        };

        this.lastMessageTime = 0;
        this.messageQueue = [];
        this.isProcessingQueue = false;
        this.isEnabled = this.config.botToken && this.config.chatId;

        if (!this.isEnabled) {
            console.warn('‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã botToken –∏–ª–∏ chatId');
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
     * @returns {Promise<boolean>}
     */
    async sendMessage(message, options = {}) {
        if (!this.isEnabled || !this.config.enableNotifications) {
            return false;
        }

        const messageOptions = {
            disable_web_page_preview: true,
            ...options
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
        return new Promise((resolve) => {
            this.messageQueue.push({
                message,
                options: messageOptions,
                resolve,
                timestamp: Date.now()
            });

            this.processQueue();
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async processQueue() {
        if (this.isProcessingQueue || this.messageQueue.length === 0) {
            return;
        }

        this.isProcessingQueue = true;

        while (this.messageQueue.length > 0) {
            const { message, options, resolve } = this.messageQueue.shift();
            
            try {
                // –°–æ–±–ª—é–¥–∞–µ–º rate limit
                const timeSinceLastMessage = Date.now() - this.lastMessageTime;
                if (timeSinceLastMessage < this.config.rateLimitDelay) {
                    await this.delay(this.config.rateLimitDelay - timeSinceLastMessage);
                }

                const success = await this.sendMessageDirect(message, options);
                resolve(success);
                this.lastMessageTime = Date.now();

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
                resolve(false);
            }
        }

        this.isProcessingQueue = false;
    }

    /**
     * –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {Object} options - –û–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns {Promise<boolean>}
     */
    async sendMessageDirect(message, options = {}) {
        const url = `${this.config.apiUrl}${this.config.botToken}/sendMessage`;
        
        const payload = {
            chat_id: this.config.chatId,
            text: message,
            ...options
        };

        let lastError = null;
        
        for (let attempt = 1; attempt <= this.config.retryAttempts; attempt++) {
            try {
                const response = await axios.post(url, payload, {
                    timeout: this.config.timeout,
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (response.data.ok) {
                    return true;
                } else {
                    throw new Error(`Telegram API error: ${response.data.description}`);
                }

            } catch (error) {
                lastError = error;
                
                if (attempt < this.config.retryAttempts) {
                    await this.delay(this.config.retryDelay * attempt);
                }
            }
        }

        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:', lastError.message);
        return false;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞
     * @param {string} parserName - –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
     */
    async sendParserStartNotification(parserName, config = {}) {
        const message = `üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞\n\n` +
                      `–ü–∞—Ä—Å–µ—Ä: ${parserName}\n` +
                      `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                      `–†–µ–∂–∏–º: ${config.mode || 'cycle'}\n`;

        await this.sendMessage(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
     * @param {string} parserName - –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞
     * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
     */
    async sendParserSuccessNotification(parserName, stats = {}) {
        const message = `‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ\n\n` +
                      `–ü–∞—Ä—Å–µ—Ä: ${parserName}\n` +
                      `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.processed || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n` +
                      `–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.duration || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
                      `–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}\n`;

        await this.sendMessage(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
     * @param {string} component - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç
     * @param {Error} error - –û—à–∏–±–∫–∞
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç
     */
    async sendCriticalErrorNotification(component, error, context = {}) {
        let message = `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê\n\n` +
                      `–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: ${component}\n` +
                      `–û—à–∏–±–∫–∞: ${error.name || 'Unknown'}\n` +
                      `–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}\n` +
                      `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`;

        if (context.url) {
            message += `URL: ${context.url}\n`;
        }

        await this.sendMessage(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
     * @param {Object} dailyStats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
     */
    async sendDailyReport(dailyStats = {}) {
        const message = `üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n` +
                      `*–î–∞—Ç–∞:* ${new Date().toLocaleDateString('ru-RU')}\n` +
                      `*–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:* ${dailyStats.totalProcessed || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n` +
                      `*–û—à–∏–±–æ–∫:* ${dailyStats.totalErrors || 0}\n` +
                      `*–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤:* ${dailyStats.activeParsers || 0}\n\n`;

        if (dailyStats.parserStats) {
            message += `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä—Å–µ—Ä–∞–º:*\n`;
            for (const [parser, stats] of Object.entries(dailyStats.parserStats)) {
                message += `‚Ä¢ ${parser}: ${stats.processed || 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n`;
            }
        }

        await this.sendMessage(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
     * @param {Object} systemStatus - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
     */
    async sendSystemStatusNotification(systemStatus = {}) {
        const message = `üíª *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*\n\n` +
                      `*–ü–∞–º—è—Ç—å:* ${systemStatus.memory || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
                      `*CPU:* ${systemStatus.cpu || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
                      `*–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã:* ${systemStatus.activeParsers || 0}\n` +
                      `*–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}\n`;

        await this.sendMessage(message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –º–æ–¥—É–ª—è –ø–∞—Ä—Å–µ—Ä–∞
     * @param {string} fromModule - –°—Ç–∞—Ä—ã–π –º–æ–¥—É–ª—å
     * @param {string} toModule - –ù–æ–≤—ã–π –º–æ–¥—É–ª—å
     * @param {Object} info - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    async sendModuleChangeNotification(fromModule, toModule, info = {}) {
        const message = `üîÑ –°–º–µ–Ω–∞ –º–æ–¥—É–ª—è –ø–∞—Ä—Å–µ—Ä–∞\n\n` +
                      `–° –º–æ–¥—É–ª—è: ${fromModule}\n` +
                      `–ù–∞ –º–æ–¥—É–ª—å: ${toModule}\n` +
                      `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n` +
                      (info.reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${info.reason}\n` : '');

        await this.sendMessage(message);
    }

    /**
     * –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns {Promise<boolean>}
     */
    async testConnection() {
        const message = `üß™ *–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*\n\n` +
                      `Telegram —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!\n` +
                      `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

        return await this.sendMessage(message);
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     * @param {boolean} enabled 
     */
    setNotificationsEnabled(enabled) {
        this.config.enableNotifications = enabled;
        console.log(`Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
     * @returns {Object}
     */
    getStatus() {
        return {
            enabled: this.isEnabled,
            notificationsEnabled: this.config.enableNotifications,
            queueLength: this.messageQueue.length,
            isProcessingQueue: this.isProcessingQueue,
            lastMessageTime: this.lastMessageTime
        };
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     * @param {number} ms - –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
     * @returns {Promise<void>}
     */
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const telegramService = new TelegramService();

module.exports = { TelegramService, telegramService };
