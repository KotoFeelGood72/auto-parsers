const path = require('path');
const fs = require('fs');

/**
 * –°–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä—Å–µ—Ä–æ–≤
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ —Å–æ–±—ã—Ç–∏–π
 */
class LoggerService {
    constructor(config = {}) {
        this.config = {
            logLevel: 'info',
            logDir: path.join(process.cwd(), 'logs'),
            maxFiles: 10,
            maxSize: '10MB',
            enableConsole: true,
            enableFile: true,
            enableTelegram: false,
            ...config
        };

        this.logger = null;
        this.telegramService = null;
        this.errorCounts = new Map(); // –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º
        this.lastErrorTime = new Map(); // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø—É
        
        this.initializeLogger();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
     */
    initializeLogger() {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.config.logDir)) {
            fs.mkdirSync(this.config.logDir, { recursive: true });
        }

        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –±–µ–∑ Winston
        this.logger = {
            error: (message, meta = {}) => this.log('error', message, meta),
            warn: (message, meta = {}) => this.log('warn', message, meta),
            info: (message, meta = {}) => this.log('info', message, meta),
            debug: (message, meta = {}) => this.log('debug', message, meta)
        };
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
     * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    log(level, message, meta = {}) {
        const timestamp = new Date().toISOString();
        const logEntry = {
            timestamp,
            level,
            message,
            ...meta
        };

        const logLine = `${timestamp} [${level.toUpperCase()}] ${message} ${JSON.stringify(meta)}`;

        // –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        if (this.config.enableConsole) {
            const colors = {
                error: '\x1b[31m', // –∫—Ä–∞—Å–Ω—ã–π
                warn: '\x1b[33m',  // –∂–µ–ª—Ç—ã–π
                info: '\x1b[32m',  // –∑–µ–ª–µ–Ω—ã–π
                debug: '\x1b[36m'  // –≥–æ–ª—É–±–æ–π
            };
            const reset = '\x1b[0m';
            console.log(`${colors[level] || ''}${logLine}${reset}`);
        }

        // –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥
        if (this.config.enableFile) {
            this.writeToFile('parser.log', JSON.stringify(logEntry) + '\n');
            
            if (level === 'error') {
                this.writeToFile('errors.log', JSON.stringify(logEntry) + '\n');
            }
        }
    }

    /**
     * –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
     * @param {string} filename - –ò–º—è —Ñ–∞–π–ª–∞
     * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
     */
    writeToFile(filename, content) {
        try {
            const filePath = path.join(this.config.logDir, filename);
            fs.appendFileSync(filePath, content);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –ª–æ–≥–∞:', error.message);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram —Å–µ—Ä–≤–∏—Å–∞
     * @param {TelegramService} telegramService 
     */
    setTelegramService(telegramService) {
        this.telegramService = telegramService;
        this.config.enableTelegram = true;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     * @param {string} sizeStr 
     * @returns {number}
     */
    parseSize(sizeStr) {
        const units = { B: 1, KB: 1024, MB: 1024 * 1024, GB: 1024 * 1024 * 1024 };
        const match = sizeStr.match(/^(\d+(?:\.\d+)?)\s*(B|KB|MB|GB)$/i);
        if (match) {
            return parseFloat(match[1]) * units[match[2].toUpperCase()];
        }
        return 10 * 1024 * 1024; // 10MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
     * @param {string} parserName - –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞
     * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
     * @param {Object} context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
     */
    async logParserError(parserName, error, context = {}) {
        const errorKey = `${parserName}:${error.name || 'Unknown'}`;
        const now = new Date();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.errorCounts.set(errorKey, (this.errorCounts.get(errorKey) || 0) + 1);
        this.lastErrorTime.set(errorKey, now);

        const errorData = {
            parser: parserName,
            error: {
                name: error.name,
                message: error.message,
                stack: error.stack
            },
            context,
            timestamp: now.toISOString(),
            count: this.errorCounts.get(errorKey)
        };

        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
        this.logger.error(`Parser Error [${parserName}]: ${error.message}`, errorData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (this.config.enableTelegram && this.telegramService) {
            await this.sendTelegramNotification(parserName, error, context, errorData.count);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–∏
     * @param {string} component - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã
     * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
     * @param {Object} context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
     */
    async logSystemError(component, error, context = {}) {
        const errorData = {
            component,
            error: {
                name: error.name,
                message: error.message,
                stack: error.stack
            },
            context,
            timestamp: new Date().toISOString()
        };

        this.logger.error(`System Error [${component}]: ${error.message}`, errorData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (this.config.enableTelegram && this.telegramService) {
            await this.sendTelegramNotification(component, error, context, 1, 'system');
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    logInfo(message, meta = {}) {
        this.logger.info(message, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {Object} meta - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    logWarning(message, meta = {}) {
        this.logger.warn(message, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
     * @param {string} parserName - –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞
     * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    logSuccess(parserName, stats = {}) {
        this.logger.info(`Parser Success [${parserName}]`, {
            parser: parserName,
            stats,
            timestamp: new Date().toISOString()
        });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
     * @param {string} component - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç
     * @param {Error} error - –û—à–∏–±–∫–∞
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç
     * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
     * @param {string} type - –¢–∏–ø –æ—à–∏–±–∫–∏ (parser/system)
     */
    async sendTelegramNotification(component, error, context, count = 1, type = 'parser') {
        try {
            const emoji = type === 'parser' ? 'üö®' : '‚ö†Ô∏è';
            const title = type === 'parser' ? '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞' : '–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞';
            
            let message = `${emoji} *${title}*\n\n`;
            message += `*–ö–æ–º–ø–æ–Ω–µ–Ω—Ç:* ${component}\n`;
            message += `*–û—à–∏–±–∫–∞:* ${error.name || 'Unknown'}\n`;
            message += `*–°–æ–æ–±—â–µ–Ω–∏–µ:* ${error.message}\n`;
            message += `*–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:* ${count}\n`;
            message += `*–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}\n`;

            if (context.url) {
                message += `*URL:* ${context.url}\n`;
            }
            if (context.parserName) {
                message += `*–ü–∞—Ä—Å–µ—Ä:* ${context.parserName}\n`;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if (error.stack && count <= 3) {
                const stackLines = error.stack.split('\n').slice(0, 5);
                message += `\n*–°—Ç–µ–∫:*\n\`\`\`\n${stackLines.join('\n')}\`\`\``;
            }

            await this.telegramService.sendMessage(message);
        } catch (telegramError) {
            this.logger.error('Failed to send Telegram notification', {
                originalError: error.message,
                telegramError: telegramError.message
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
     * @returns {Object}
     */
    getErrorStats() {
        const stats = {};
        for (const [key, count] of this.errorCounts) {
            const [parser, errorType] = key.split(':');
            if (!stats[parser]) {
                stats[parser] = {};
            }
            stats[parser][errorType] = {
                count,
                lastTime: this.lastErrorTime.get(key)
            };
        }
        return stats;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
     */
    clearErrorStats() {
        this.errorCounts.clear();
        this.lastErrorTime.clear();
        this.logger.info('Error statistics cleared');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ Winston
     * @returns {winston.Logger}
     */
    getLogger() {
        return this.logger;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const loggerService = new LoggerService();

module.exports = { LoggerService, loggerService };
