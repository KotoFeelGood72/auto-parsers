#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
 */

const { databaseManager } = require('./database/database');

async function demonstrateSources() {
    console.log('üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        console.log('\nüìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:');
        const sources = await databaseManager.getActiveSources();
        sources.forEach(source => {
            console.log(`  - ${source.display_name} (${source.name}) - ${source.base_url}`);
        });

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
        const stats = await databaseManager.getStats();
        if (stats && stats.sourceStats) {
            stats.sourceStats.forEach(source => {
                console.log(`  ${source.display_name}: ${source.count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            });
        }

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
        for (const source of sources) {
            console.log(`\nüöó –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å ${source.display_name} (–ø–µ—Ä–≤—ã–µ 5):`);
            const listings = await databaseManager.getListingsBySource(source.name, 5);
            
            if (listings.length > 0) {
                listings.forEach((listing, index) => {
                    console.log(`  ${index + 1}. ${listing.title}`);
                    console.log(`     –¶–µ–Ω–∞: ${listing.price_formatted}`);
                    console.log(`     –ì–æ–¥: ${listing.year}, –ü—Ä–æ–±–µ–≥: ${listing.kilometers} –∫–º`);
                    console.log(`     URL: ${listing.short_url}`);
                    console.log('');
                });
            } else {
                console.log(`  –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${source.display_name}`);
            }
        }

        // –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        console.log('\nüîç –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "dubizzle":');
        const dubizzleSource = await databaseManager.getSourceByName('dubizzle');
        if (dubizzleSource) {
            console.log(`  –ù–∞–π–¥–µ–Ω: ${dubizzleSource.display_name}`);
            console.log(`  URL: ${dubizzleSource.base_url}`);
            console.log(`  –ê–∫—Ç–∏–≤–µ–Ω: ${dubizzleSource.is_active ? '–î–∞' : '–ù–µ—Ç'}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            const dubizzleListings = await databaseManager.getListingsBySource('dubizzle', 3);
            console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${dubizzleListings.length}`);
        } else {
            console.log('  –ò—Å—Ç–æ—á–Ω–∏–∫ "dubizzle" –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        console.log('\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    } finally {
        await databaseManager.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if (require.main === module) {
    demonstrateSources()
        .then(() => {
            console.log('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { demonstrateSources };
