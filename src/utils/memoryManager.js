const { logMemoryUsage, forceGarbageCollection } = require('./browser');

class MemoryManager {
    constructor() {
        this.processedCount = 0;
        this.memoryCheckInterval = 5; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π
        this.forceCleanupInterval = 20; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 20 –æ–ø–µ—Ä–∞—Ü–∏–π
        this.maxMemoryMB = 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB
        this.cleanupThreshold = 0.8; // –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (80% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    increment() {
        this.processedCount++;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
    shouldCleanup() {
        return this.processedCount % this.memoryCheckInterval === 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    shouldForceCleanup() {
        return this.processedCount % this.forceCleanupInterval === 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    isMemoryHigh() {
        const used = process.memoryUsage();
        const usedMB = used.rss / 1024 / 1024;
        return usedMB > (this.maxMemoryMB * this.cleanupThreshold);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
    async cleanup(reason = 'regular') {
        console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ (${reason}) –ø–æ—Å–ª–µ ${this.processedCount} –æ–ø–µ—Ä–∞—Ü–∏–π`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        logMemoryUsage();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        forceGarbageCollection();
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        console.log('üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:');
        logMemoryUsage();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    async checkAndCleanup() {
        if (this.shouldCleanup()) {
            if (this.isMemoryHigh()) {
                await this.cleanup('high memory usage');
            } else if (this.shouldForceCleanup()) {
                await this.cleanup('scheduled cleanup');
            } else {
                // –û–±—ã—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                forceGarbageCollection();
            }
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    getMemoryStats() {
        const used = process.memoryUsage();
        return {
            rss: Math.round(used.rss / 1024 / 1024),
            heapUsed: Math.round(used.heapUsed / 1024 / 1024),
            heapTotal: Math.round(used.heapTotal / 1024 / 1024),
            external: Math.round(used.external / 1024 / 1024),
            processedCount: this.processedCount
        };
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    setConfig(config) {
        if (config.memoryCheckInterval) this.memoryCheckInterval = config.memoryCheckInterval;
        if (config.forceCleanupInterval) this.forceCleanupInterval = config.forceCleanupInterval;
        if (config.maxMemoryMB) this.maxMemoryMB = config.maxMemoryMB;
        if (config.cleanupThreshold) this.cleanupThreshold = config.cleanupThreshold;
    }
}

module.exports = { MemoryManager };
