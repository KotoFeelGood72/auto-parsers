const pool = require("../db");

const BATCH_SIZE = 10; // üîπ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π

async function saveDataBatch(carList) {
    if (!carList || carList.length === 0) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ!");
        return;
    }

    const client = await pool.connect();
    try {
        await client.query("BEGIN");

        // üîπ –ì–æ—Ç–æ–≤–∏–º SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        let carValues = [];
        let carPlaceholders = [];
        let photoValues = [];
        let photoPlaceholders = [];
        let index = 1;

        for (const car of carList) {
            carValues.push(
                car.short_url || null,
                car.title || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.make || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.model || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.year || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.body_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.horsepower || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.fuel_type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.motors_trim || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                parseInt(car.kilometers, 10) || 0,
                car.price?.formatted || "0",
                car.price?.raw || 0,
                car.price?.currency || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.exterior_color || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.location || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                car.contact?.phone || "–ù–µ —É–∫–∞–∑–∞–Ω",
                car.sellers?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                car.sellers?.type || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                car.sellers?.logo || null, // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                car.sellers?.profileLink || null // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            );

            carPlaceholders.push(`(
                $${index}, $${index + 1}, $${index + 2}, $${index + 3}, $${index + 4}, 
                $${index + 5}, $${index + 6}, $${index + 7}, $${index + 8}, $${index + 9}, 
                $${index + 10}, $${index + 11}, $${index + 12}, $${index + 13}, $${index + 14}, 
                $${index + 15}, $${index + 16}, $${index + 17}, $${index + 18}, $${index + 19}, NOW()
            )`);

            index += 20;

            // üîπ –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ
            if (car.photos && car.photos.length > 0) {
                for (const photo of car.photos) {
                    photoValues.push(car.short_url, photo);
                    photoPlaceholders.push(`(
                        (SELECT id FROM car_listings WHERE short_url = $${photoValues.length - 1}), 
                        $${photoValues.length}
                    )`);
                }
            }
        }

        // üîπ –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (carValues.length > 0) {
            const insertCarQuery = `
                INSERT INTO car_listings (
                    short_url, title, make, model, year, body_type, horsepower, fuel_type, 
                    motors_trim, kilometers, price_formatted, price_raw, currency, 
                    exterior_color, location, phone, seller_name, seller_type, seller_logo, seller_profile_link, updated_at
                ) VALUES ${carPlaceholders.join(", ")}
                ON CONFLICT (short_url) DO UPDATE 
                SET title = EXCLUDED.title,
                    make = EXCLUDED.make,
                    model = EXCLUDED.model,
                    year = EXCLUDED.year,
                    body_type = EXCLUDED.body_type,
                    horsepower = EXCLUDED.horsepower,
                    fuel_type = EXCLUDED.fuel_type,
                    motors_trim = EXCLUDED.motors_trim,
                    kilometers = EXCLUDED.kilometers,
                    price_formatted = EXCLUDED.price_formatted,
                    price_raw = EXCLUDED.price_raw,
                    currency = EXCLUDED.currency,
                    exterior_color = EXCLUDED.exterior_color,
                    location = EXCLUDED.location,
                    phone = EXCLUDED.phone,
                    seller_name = EXCLUDED.seller_name,  -- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    seller_type = EXCLUDED.seller_type,  -- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    seller_logo = EXCLUDED.seller_logo,  -- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    seller_profile_link = EXCLUDED.seller_profile_link,  -- ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    updated_at = NOW();
            `;
            await client.query(insertCarQuery, carValues);
        }

        // üîπ –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if (photoValues.length > 0) {
            const insertPhotoQuery = `
                INSERT INTO car_photos (listing_id, photo_url) 
                VALUES ${photoPlaceholders.join(", ")}
                ON CONFLICT (listing_id, photo_url) DO NOTHING;
            `;
            await client.query(insertPhotoQuery, photoValues);
        }

        await client.query("COMMIT");
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${carList.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
    } catch (error) {
        await client.query("ROLLBACK");
        console.error("‚ùå –û—à–∏–±–∫–∞:", error);
    } finally {
        client.release();
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—á–∫–∞–º–∏
async function parseAndSave(cars) {
    for (let i = 0; i < cars.length; i += BATCH_SIZE) {
        const batch = cars.slice(i, i + BATCH_SIZE);
        await saveDataBatch(batch);
    }
}

// üîπ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
module.exports = { parseAndSave };