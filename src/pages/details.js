const { extractText } = require("./details/extractText");

async function scrapeCarDetails(url, context) {
  const page = await context.newPage();
  let carDetails = { short_url: url, sellers: {}, photos: [], contact: {} };

  try {
    console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

    await page.setExtraHTTPHeaders({
      "User-Agent":
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    });

    await page.goto(url, {
      waitUntil: "domcontentloaded",
      timeout: 10000,
    });

    console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

    const fields = [
      {
        key: "title",
        selector: "h1",
        default: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      },
      {
        key: "year",
        selector: ".mileage .item:nth-child(1) .mileage_text",
        default: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      },
      {
        key: "body_type",
        selector:
          ".features-list .feature-list__item:nth-child(9) .feature-value",
        default: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      },
      {
        key: "drivetype",
        selector:
          ".features-list .feature-list__item:nth-child(5) .feature-value",
        default: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      },
      {
        key: "fuel_type",
        selector:
          ".features-list .feature-list__item:nth-child(11) .feature-value",
        default: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      },
      {
        key: "kilometers",
        selector: ".mileage .item:nth-child(2) .mileage_text",
        default: "0",
        sanitize: (v) => v.replace(/\D/g, ""),
      },
      {
        key: "exterior_color",
        selector:
          ".features-list .feature-list__item:nth-child(8) .feature-value",
        default: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      },
      {
        key: "location",
        selector: "#location_text",
        default: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      },
      {
        key: "motors_trim",
        selector:
          ".features-list .feature-list__item:nth-child(7) .feature-value",
        default: "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
      },
    ];

    for (const field of fields) {
      try {
        carDetails[field.key] = await extractText(page, field.selector);
        if (field.sanitize) {
          carDetails[field.key] = field.sanitize(carDetails[field.key]);
        }
      } catch {
        carDetails[field.key] = field.default;
      }
    }

    // üîπ –°–±–æ—Ä —Ç–æ–ª—å–∫–æ data-src –∏–∑ –Ω–µ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–∞–π–¥–æ–≤
    try {
      await page.waitForSelector(".swiper-slide img", { timeout: 7000 });

      carDetails.photos = await page.evaluate(() => {
        const slides = document.querySelectorAll(
          ".swiper-slide:not(.swiper-slide-duplicate) img"
        );
        const urls = new Set();

        slides.forEach((img) => {
          const src = img.getAttribute("data-src");
          if (src) {
            urls.add(src.startsWith("//") ? "https:" + src : src);
          }
        });

        return Array.from(urls);
      });

      console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${carDetails.photos.length}`);
    } catch (err) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", err.message);
    }

    const knownMakes = [
      "Alfa Romeo",
      "Aston Martin",
      "Audi",
      "Bentley",
      "BMW",
      "Bugatti",
      "Cadillac",
      "Chevrolet",
      "Chrysler",
      "Citroen",
      "Dacia",
      "Daewoo",
      "Daihatsu",
      "Dodge",
      "Ferrari",
      "Fiat",
      "Ford",
      "GMC",
      "Geely",
      "Genesis",
      "Honda",
      "Hummer",
      "Hyundai",
      "Infiniti",
      "Isuzu",
      "Jaguar",
      "Jeep",
      "Kia",
      "Lada",
      "Lamborghini",
      "Lancia",
      "Land Rover",
      "Lexus",
      "Lincoln",
      "Maserati",
      "Mazda",
      "McLaren",
      "Mercedes-Benz",
      "Mini",
      "Mitsubishi",
      "Nissan",
      "Opel",
      "Peugeot",
      "Pontiac",
      "Porsche",
      "Renault",
      "Rolls Royce",
      "Rover",
      "Saab",
      "Seat",
      "Skoda",
      "Smart",
      "SsangYong",
      "Subaru",
      "Suzuki",
      "Tesla",
      "Toyota",
      "Volkswagen",
      "Volvo",
      "Range Rover",
    ];

    const getMakeFromTitle = (title) => {
      if (!title || typeof title !== "string") return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

      const normalizedTitle = title.toLowerCase();

      const foundMake = knownMakes.find((make) =>
        normalizedTitle.startsWith(make.toLowerCase())
      );

      return foundMake || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    };

    // üè∑Ô∏è –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä–∫—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    carDetails.make = getMakeFromTitle(carDetails.title);

    return carDetails;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
    return null;
  } finally {
    await page.close();
  }
}

module.exports = { scrapeCarDetails };
