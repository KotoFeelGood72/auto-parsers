async function scrapeCarDetails(url, context, attempt = 0) {


const page = await context.newPage(); 

  try {
    console.log(`üöó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ ${url}`);

    await page.setExtraHTTPHeaders({
      "User-Agent":
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    });

    await page.goto(url, {
      waitUntil: "domcontentloaded",
      timeout: 90000,
    });

    console.log("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...");

    await page.waitForFunction(() => {
      const elem = document.querySelector('[data-testid="listing-price"]');
      return elem && elem.innerText.trim().length > 0;
   }, { timeout: 60000 });

    const title = await page.$eval(
      '[data-testid="listing-sub-heading"]',
      (el) => el.innerText.trim()
    );
    const make = await page.$eval('[data-testid="listing-sub-heading"]', (el) =>
      el.innerText.split(" ")[0].trim()
    );
    const model = await page.$eval(
      '[data-testid="listing-sub-heading"]',
      (el) => el.innerText.split(" ")[1].trim()
    );
    const year = await page.$eval('[data-testid="listing-year-value"]', (el) =>
      el.innerText.trim()
    );
    const bodyType = await page.$eval(
      '[data-testid="overview-body_type-value"]',
      (el) => el.innerText.trim()
    );
    const horsepower = await page.$eval(
      '[data-testid="overview-horsepower-value"]',
      (el) => el.innerText.trim()
    );
    const fuelType = await page.$eval(
      '[data-testid="overview-fuel_type-value"]',
      (el) => el.innerText.trim()
    );
    const motorsTrim = await page.$eval(
      '[data-testid="overview-fuel_type-value"]',
      (el) => el.innerText.trim()
    );
    const kilometers = await page.$eval(
      '[data-testid="listing-kilometers-value"]',
      (el) => el.innerText.trim().replace(/\D/g, "")
    );
    const exteriorColor = await page.$eval(
      '[data-testid="overview-exterior_color-value"]',
      (el) => el.innerText.trim()
    );
    const location = await page.$eval(
      '[data-testid="listing-location-map"]',
      (el) => el.innerText.trim()
    );

    const priceFormatted = await page.$eval(
      '[data-testid="listing-price"] span',
      (el) => el.innerText.trim().replace("AED", "").trim()
    );
    const priceRaw = parseFloat(priceFormatted.replace(/,/g, ""));
    const currency = "AED";

    const shortUrl = url;

    let phoneNumber = null;


// –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
let sellerName = "–ù–µ —É–∫–∞–∑–∞–Ω";
let sellerType = "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ";
let sellerLogo = null;
let sellerProfileLink = null;

try {
  console.log("‚åõ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–ª–æ–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞...");
  await page.waitForSelector('[data-testid="name"]', { timeout: 30000, state: "attached" });

  sellerName = await page.$eval(
    '[data-testid="name"]',
    (el) => el.innerText.trim()
  );

  sellerType = await page.$eval(
    '[data-testid="type"]',
    (el) => el.innerText.trim()
  );

  sellerLogo = await page.$eval('[data-testid="logo"] img', (el) => el.src);

  const sellerProfileElement = await page.$('[data-testid="view-all-cars"]');
  if (sellerProfileElement) {
    sellerProfileLink = await page.$eval(
      '[data-testid="view-all-cars"]',
      (el) => el.href
    );
  }

  console.log(`üè¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${sellerName} (${sellerType})`);
} catch (error) {
  console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–≤—Ü–µ:", error);
}

    // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ª–æ–∫–∞—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ "Call"
    const callButton = page.locator('[data-testid="call-cta-button"]').first();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
    const callButtonCount = await callButton.count();

    if (callButtonCount > 0) {
      console.log(
        `üìû –ù–∞–π–¥–µ–Ω–æ ${callButtonCount} –∫–Ω–æ–ø–æ–∫ –≤—ã–∑–æ–≤–∞. –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–π...`
      );

      let clicked = false;
      for (let attempt = 1; attempt <= 3; attempt++) {
        try {
          console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}...`);

          // –ò–Ω–æ–≥–¥–∞ –º–æ–∂–Ω–æ —è–≤–Ω–æ –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏—Ç—å (–Ω–æ Playwright –∏ —Ç–∞–∫ —Å–∫—Ä–æ–ª–ª–∏—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ):
          await callButton.scrollIntoViewIfNeeded();
          await page.waitForTimeout(2000);

          // –ö–ª–∏–∫–∞–µ–º
          await callButton.click();
          clicked = true;
          console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ 'Call'");
          break;
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—à–∏–±–∫–∞:`, error);
          await page.waitForTimeout(2000);
        }
      }

      if (!clicked) {
        console.error(
          "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ 'Call' –¥–∞–∂–µ –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏!"
        );
        return;
      }

      console.log("‚åõ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...");
      const modal = page.locator(".MuiDialog-container");
      await modal.waitFor({ state: "visible", timeout: 10000 });
      console.log("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ!");

      // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneNumberLocator = modal.locator(
        '[data-testid="phone-number"] p'
      );
      await phoneNumberLocator.waitFor({ state: "visible", timeout: 15000 });

      // –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
      phoneNumber = await phoneNumberLocator.innerText();
      console.log(`üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneNumber}`);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      const closeButton = modal.locator('[data-testid="close-button"]');
      if ((await closeButton.count()) > 0) {
        await closeButton.click();
        await page.waitForTimeout(2000);
        console.log("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.");
      }
    } else {
      console.warn("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
    }

    // üîπ –ö–ª–∏–∫–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É `.MuiImageListItem-standard`
    const mainImageSelector = ".MuiImageListItem-standard";
    await page.waitForSelector(mainImageSelector, { timeout: 20000, state: "attached" });

    let clicked = false;
    for (let attempt = 0; attempt < 3; attempt++) {
      // 3 –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–∞
      console.log(`üì∏ –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ #${attempt + 1}...`);

      const mainImage = await page.$(mainImageSelector);
      if (!mainImage) {
        console.warn("‚ö†Ô∏è –ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ, –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ...");
        await page.waitForTimeout(1000);
        continue;
      }

      try {
        await mainImage.hover();
        await page.waitForTimeout(500);
        await mainImage.click({ delay: 200 });
        clicked = true;
        break;
      } catch (error) {
        console.warn("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...");
        await page.waitForTimeout(1000);
      }
    }

    if (!clicked) {
      throw new Error("üö® –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!");
    }

    console.log("üì∏ –ö–ª–∏–∫–Ω—É–ª–∏, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–∞–ª–∫–∏...");

    // üîπ –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    await page.waitForSelector(".MuiModal-root", { timeout: 15000, state: "attached" });

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª–∫–µ
    await page.waitForFunction(
      () => {
        const modal = document.querySelector(".MuiModal-root");
        return (
          modal && modal.querySelectorAll(".MuiImageList-root img").length > 0
        );
      },
      { timeout: 45000, state: "attached" }
    );

    // üîπ –°–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const photos = await page.evaluate(() => {
      return Array.from(
        document.querySelectorAll(".MuiModal-root .MuiImageList-root img")
      )
        .map((img) => img.src)
        .filter(
          (src) =>
            src.includes(".jpeg") ||
            src.includes(".jpg") ||
            src.includes(".png")
        );
    });

    console.log(`üì∏ –°–æ–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${photos.length}`);

    await page.waitForTimeout(500);

    const carDetails = {
      short_url: shortUrl,
      title,
      photos,
      make,
      model,
      year,
      body_type: bodyType,
      horsepower,
      fuel_type: fuelType,
      motors_trim: motorsTrim,
      kilometers,
      sellers: {
        sellerName: sellerName || "–ù–µ —É–∫–∞–∑–∞–Ω",
        sellerType: sellerType || "–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ",
        sellerLogo: sellerLogo || null,
        sellerProfileLink: sellerProfileLink || null,
      },
      price: {
        formatted: priceFormatted,
        raw: priceRaw,
        currency,
      },
      exterior_color: exteriorColor,
      location,
      contact: {
        phone: phoneNumber || "–ù–µ —É–∫–∞–∑–∞–Ω",
      },
    };

    console.log(carDetails);
    return carDetails;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å ${url}:`, error);
    if (attempt < 2) {
        return await scrapeCarDetails(url, context, attempt + 1);
    }
    return null;
  } finally {
    try {
      await page.close(); // ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
  } catch (err) {
      console.warn("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", err);
  }
}
}


process.on('SIGINT', async () => {
  console.log("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...");
  if (browser) await browser.close();
  process.exit();
});



module.exports = { scrapeCarDetails };








