async function* scrapeListings(browser, context) {
  let attempt = 0;

  while (attempt < 3) {
    const page = await context.newPage();

    try {
      console.log("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ Dubicars...");

      await page.setExtraHTTPHeaders({
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
      });

      // –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
      await page.route('**/*.{png,jpg,jpeg,gif,svg,webp}', route => route.abort());

      let currentPage = 1;
      let processedCount = 0;

      while (true) {
        const url = `https://www.dubicars.com/dubai/used?page=${currentPage}`;
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${url}`);

        await page.goto(url, { waitUntil: "domcontentloaded", timeout: 60000 });

        // –ñ–¥—ë–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
        await page.waitForSelector('section#serp-list li.serp-list-item a.image-container', { timeout: 30000 });

        const carLinks = await page.$$eval('section#serp-list li.serp-list-item a.image-container', (elements) =>
          elements
            .map((el) => el.getAttribute("href"))
            .filter((href) => href && href.startsWith("https://www.dubicars.com/"))
        );

        if (carLinks.length === 0) {
          console.log(`üèÅ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage} –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º.`);
          break;
        }

        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${carLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);

        for (const link of carLinks) {
          yield link;
          processedCount++;
          
          // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
          if (processedCount % 10 === 0) {
            console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ ${processedCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`);
            await page.evaluate(() => {
              if (window.gc) window.gc();
            });
          }
        }

        console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${currentPage + 1}`);
        currentPage++;
      }

      return;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error);
      attempt++;
      console.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
    } finally {
      await page.close();
      console.log("üõë –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞.");
    }
  }

  console.error("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
}

module.exports = { scrapeListings };