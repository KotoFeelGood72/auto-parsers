const pool = require('../db');
const { 
    getCreateTablesSQL, 
    getCreateIndexesSQL, 
    getCreateTriggersSQL,
    getDropTablesSQL,
    getCheckTablesSQL
} = require('./schema');

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
class DatabaseManager {
    constructor() {
        this.pool = pool;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –∏–Ω–¥–µ–∫—Å–æ–≤, —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤)
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    async initialize() {
        const client = await this.pool.connect();
        
        try {
            await client.query("BEGIN");

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...");
            const createTablesSQL = getCreateTablesSQL();
            for (const sql of createTablesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...");
            const createIndexesSQL = getCreateIndexesSQL();
            for (const sql of createIndexesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...");
            const createTriggersSQL = getCreateTriggersSQL();
            for (const sql of createTriggersSQL) {
                await client.query(sql);
            }

            await client.query("COMMIT");
            console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            return true;

        } catch (error) {
            await client.query("ROLLBACK");
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
            return false;
        } finally {
            client.release();
        }
    }

    /**
     * –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ)
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
     */
    async recreate() {
        const client = await this.pool.connect();
        
        try {
            await client.query("BEGIN");

            console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü...");
            const dropTablesSQL = getDropTablesSQL();
            for (const sql of dropTablesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...");
            const createTablesSQL = getCreateTablesSQL();
            for (const sql of createTablesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...");
            const createIndexesSQL = getCreateIndexesSQL();
            for (const sql of createIndexesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...");
            const createTriggersSQL = getCreateTriggersSQL();
            for (const sql of createTriggersSQL) {
                await client.query(sql);
            }

            await client.query("COMMIT");
            console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            return true;

        } catch (error) {
            await client.query("ROLLBACK");
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
            return false;
        } finally {
            client.release();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
     * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
     */
    async checkTables() {
        const client = await this.pool.connect();
        
        try {
            const result = await client.query(getCheckTablesSQL()[0]);
            const existingTables = result.rows.map(row => row.table_name);
            
            return {
                car_listings: existingTables.includes('car_listings'),
                car_photos: existingTables.includes('car_photos'),
                allTablesExist: existingTables.length === 2
            };
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü:", error);
            return {
                car_listings: false,
                car_photos: false,
                allTablesExist: false
            };
        } finally {
            client.release();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
     */
    async getStats() {
        const client = await this.pool.connect();
        
        try {
            const stats = {};
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ car_listings
            const listingsResult = await client.query('SELECT COUNT(*) as count FROM car_listings');
            stats.totalListings = parseInt(listingsResult.rows[0].count);

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ car_photos
            const photosResult = await client.query('SELECT COUNT(*) as count FROM car_photos');
            stats.totalPhotos = parseInt(photosResult.rows[0].count);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ä–∫–∞–º
            const makeStats = await client.query(`
                SELECT make, COUNT(*) as count 
                FROM car_listings 
                WHERE make != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' 
                GROUP BY make 
                ORDER BY count DESC 
                LIMIT 10
            `);
            stats.topMakes = makeStats.rows;

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
            const yearStats = await client.query(`
                SELECT year, COUNT(*) as count 
                FROM car_listings 
                WHERE year != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' 
                GROUP BY year 
                ORDER BY year DESC 
                LIMIT 10
            `);
            stats.topYears = yearStats.rows;

            // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            const priceStats = await client.query(`
                SELECT 
                    AVG(price_raw) as avg_price,
                    MIN(price_raw) as min_price,
                    MAX(price_raw) as max_price
                FROM car_listings 
                WHERE price_raw > 0
            `);
            stats.priceStats = priceStats.rows[0];

            return stats;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
            return null;
        } finally {
            client.release();
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö)
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    async clear() {
        const client = await this.pool.connect();
        
        try {
            await client.query("BEGIN");

            console.log("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
            await client.query('DELETE FROM car_photos');
            await client.query('DELETE FROM car_listings');

            await client.query("COMMIT");
            console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞");
            return true;

        } catch (error) {
            await client.query("ROLLBACK");
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
            return false;
        } finally {
            client.release();
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    async close() {
        await this.pool.end();
        console.log("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ");
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
const databaseManager = new DatabaseManager();

module.exports = { DatabaseManager, databaseManager };
