const pool = require('../db');
const { 
    getCreateTablesSQL, 
    getCreateIndexesSQL, 
    getCreateTriggersSQL,
    getDropTablesSQL,
    getCheckTablesSQL
} = require('./schema');

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
class DatabaseManager {
    constructor() {
        this.pool = pool;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –∏–Ω–¥–µ–∫—Å–æ–≤, —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤)
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    async initialize() {
        const client = await this.pool.connect();
        
        try {
            await client.query("BEGIN");

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...");
            const createTablesSQL = getCreateTablesSQL();
            for (const sql of createTablesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...");
            const createIndexesSQL = getCreateIndexesSQL();
            for (const sql of createIndexesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...");
            const createTriggersSQL = getCreateTriggersSQL();
            for (const sql of createTriggersSQL) {
                await client.query(sql);
            }

            await client.query("COMMIT");
            console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            return true;

        } catch (error) {
            await client.query("ROLLBACK");
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
            return false;
        } finally {
            client.release();
        }
    }

    /**
     * –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ)
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
     */
    async recreate() {
        const client = await this.pool.connect();
        
        try {
            await client.query("BEGIN");

            console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü...");
            const dropTablesSQL = getDropTablesSQL();
            for (const sql of dropTablesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...");
            const createTablesSQL = getCreateTablesSQL();
            for (const sql of createTablesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...");
            const createIndexesSQL = getCreateIndexesSQL();
            for (const sql of createIndexesSQL) {
                await client.query(sql);
            }

            console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤...");
            const createTriggersSQL = getCreateTriggersSQL();
            for (const sql of createTriggersSQL) {
                await client.query(sql);
            }

            await client.query("COMMIT");
            console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            return true;

        } catch (error) {
            await client.query("ROLLBACK");
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
            return false;
        } finally {
            client.release();
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
     * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
     */
    async checkTables() {
        const client = await this.pool.connect();
        
        try {
            const result = await client.query(getCheckTablesSQL()[0]);
            const existingTables = result.rows.map(row => row.table_name);
            
            return {
                sources: existingTables.includes('sources'),
                car_listings: existingTables.includes('car_listings'),
                car_photos: existingTables.includes('car_photos'),
                allTablesExist: existingTables.length === 3
            };
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü:", error);
            return {
                sources: false,
                car_listings: false,
                car_photos: false,
                allTablesExist: false
            };
        } finally {
            client.release();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
     */
    async getStats() {
        const client = await this.pool.connect();
        
        try {
            const stats = {};
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            const sourcesResult = await client.query('SELECT COUNT(*) as count FROM sources');
            stats.totalSources = parseInt(sourcesResult.rows[0].count);

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ car_listings
            const listingsResult = await client.query('SELECT COUNT(*) as count FROM car_listings');
            stats.totalListings = parseInt(listingsResult.rows[0].count);

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ car_photos
            const photosResult = await client.query('SELECT COUNT(*) as count FROM car_photos');
            stats.totalPhotos = parseInt(photosResult.rows[0].count);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            const sourceStats = await client.query(`
                SELECT s.name, s.display_name, COUNT(cl.id) as count 
                FROM sources s
                LEFT JOIN car_listings cl ON s.id = cl.source_id
                GROUP BY s.id, s.name, s.display_name
                ORDER BY count DESC
            `);
            stats.sourceStats = sourceStats.rows;

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ä–∫–∞–º
            const makeStats = await client.query(`
                SELECT make, COUNT(*) as count 
                FROM car_listings 
                WHERE make != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' 
                GROUP BY make 
                ORDER BY count DESC 
                LIMIT 10
            `);
            stats.topMakes = makeStats.rows;

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
            const yearStats = await client.query(`
                SELECT year, COUNT(*) as count 
                FROM car_listings 
                WHERE year != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' 
                GROUP BY year 
                ORDER BY year DESC 
                LIMIT 10
            `);
            stats.topYears = yearStats.rows;

            // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
            const priceStats = await client.query(`
                SELECT 
                    AVG(price_raw) as avg_price,
                    MIN(price_raw) as min_price,
                    MAX(price_raw) as max_price
                FROM car_listings 
                WHERE price_raw > 0
            `);
            stats.priceStats = priceStats.rows[0];

            return stats;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
            return null;
        } finally {
            client.release();
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö)
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    async clear() {
        const client = await this.pool.connect();
        
        try {
            await client.query("BEGIN");

            console.log("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
            await client.query('DELETE FROM car_photos');
            await client.query('DELETE FROM car_listings');

            await client.query("COMMIT");
            console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞");
            return true;

        } catch (error) {
            await client.query("ROLLBACK");
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
            return false;
        } finally {
            client.release();
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {Object} sourceData - –î–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @returns {Promise<Object|null>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    async addSource(sourceData) {
        const client = await this.pool.connect();
        
        try {
            const { name, display_name, base_url, is_active = true } = sourceData;
            
            const result = await client.query(`
                INSERT INTO sources (name, display_name, base_url, is_active)
                VALUES ($1, $2, $3, $4)
                RETURNING *
            `, [name, display_name, base_url, is_active]);
            
            console.log(`‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ "${name}" –¥–æ–±–∞–≤–ª–µ–Ω`);
            return result.rows[0];
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:", error);
            return null;
        } finally {
            client.release();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏
     * @param {string} name - –ò–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @returns {Promise<Object|null>} –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    async getSourceByName(name) {
        const client = await this.pool.connect();
        
        try {
            const result = await client.query(`
                SELECT * FROM sources WHERE name = $1
            `, [name]);
            
            return result.rows[0] || null;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:", error);
            return null;
        } finally {
            client.release();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    async getActiveSources() {
        const client = await this.pool.connect();
        
        try {
            const result = await client.query(`
                SELECT * FROM sources WHERE is_active = true ORDER BY name
            `);
            
            return result.rows;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:", error);
            return [];
        } finally {
            client.release();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
     * @param {string} sourceName - –ò–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
     * @param {number} offset - –°–º–µ—â–µ–Ω–∏–µ
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
     */
    async getListingsBySource(sourceName, limit = 100, offset = 0) {
        const client = await this.pool.connect();
        
        try {
            const result = await client.query(`
                SELECT cl.*, s.name as source_name, s.display_name as source_display_name
                FROM car_listings cl
                JOIN sources s ON cl.source_id = s.id
                WHERE s.name = $1
                ORDER BY cl.created_at DESC
                LIMIT $2 OFFSET $3
            `, [sourceName, limit, offset]);
            
            return result.rows;
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É:", error);
            return [];
        } finally {
            client.release();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–∞—Ä—Å–µ—Ä–æ–≤
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    async initializeSources() {
        const client = await this.pool.connect();
        
        try {
            await client.query("BEGIN");

            // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            const sources = [
                { name: 'dubizzle', display_name: 'Dubizzle', base_url: 'https://www.dubizzle.com' },
                { name: 'dubicars', display_name: 'Dubicars', base_url: 'https://www.dubicars.com' },
                { name: 'carswitch', display_name: 'Carswitch', base_url: 'https://carswitch.com' },
                { name: 'opensooq', display_name: 'OpenSooq', base_url: 'https://www.opensooq.com' }
            ];

            for (const source of sources) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫
                const existing = await client.query(`
                    SELECT id FROM sources WHERE name = $1
                `, [source.name]);

                if (existing.rows.length === 0) {
                    await client.query(`
                        INSERT INTO sources (name, display_name, base_url, is_active)
                        VALUES ($1, $2, $3, $4)
                    `, [source.name, source.display_name, source.base_url, true]);
                    console.log(`‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ "${source.name}" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
                } else {
                    console.log(`‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ "${source.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                }
            }

            await client.query("COMMIT");
            console.log("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            return true;

        } catch (error) {
            await client.query("ROLLBACK");
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:", error);
            return false;
        } finally {
            client.release();
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
     */
    async close() {
        await this.pool.end();
        console.log("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ");
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
const databaseManager = new DatabaseManager();

module.exports = { DatabaseManager, databaseManager };
