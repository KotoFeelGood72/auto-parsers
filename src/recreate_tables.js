const pool = require("./db");

async function recreateTables() {
    const client = await pool.connect();

    try {
        await client.query("BEGIN");

        console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã...");
        
        // –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ)
        await client.query("DROP TABLE IF EXISTS car_photos CASCADE;");
        await client.query("DROP TABLE IF EXISTS car_listings CASCADE;");

        console.log("üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã...");

        // –¢–∞–±–ª–∏—Ü–∞ car_listings —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        const createCarListingsTable = `
            CREATE TABLE car_listings (
                id SERIAL PRIMARY KEY,
                short_url TEXT UNIQUE NOT NULL,
                title TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                make TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                model TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                year TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                body_type TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                horsepower TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                fuel_type TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                motors_trim TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                kilometers INT DEFAULT 0,
                price_formatted TEXT DEFAULT '0',
                price_raw NUMERIC DEFAULT 0,
                currency TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                exterior_color TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                location TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                phone TEXT DEFAULT '–ù–µ —É–∫–∞–∑–∞–Ω',
                seller_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
                seller_type TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
                seller_logo TEXT,
                seller_profile_link TEXT,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            );
        `;

        // –¢–∞–±–ª–∏—Ü–∞ car_photos
        const createCarPhotosTable = `
            CREATE TABLE car_photos (
                id SERIAL PRIMARY KEY,
                listing_id INT REFERENCES car_listings(id) ON DELETE CASCADE,
                photo_url TEXT NOT NULL,
                UNIQUE(listing_id, photo_url)
            );
        `;

        await client.query(createCarListingsTable);
        await client.query(createCarPhotosTable);

        await client.query("COMMIT");
        console.log("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        const showColumnsQuery = `
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'car_listings' 
            ORDER BY ordinal_position;
        `;
        
        const columns = await client.query(showColumnsQuery);
        console.log("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã car_listings:");
        columns.rows.forEach(row => {
            console.log(`  - ${row.column_name} (${row.data_type}) ${row.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'}`);
        });

    } catch (error) {
        await client.query("ROLLBACK");
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:", error);
    } finally {
        client.release();
    }
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
recreateTables().catch(console.error);
