// const { scrapeListings } = require("./pages/listings");
// const { scrapeCarDetails } = require("./pages/details");
// const { parseAndSave } = require("./utils/saveData");
// // const { saveData } = require("./utils/saveData");


// (async () => {
//     console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...");

//     try {
//         for await (const link of scrapeListings()) { // üî• –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–π
//             console.log(`üöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${link}`);
//             try {
//                 const carDetails = await scrapeCarDetails(link);
//                 if (carDetails) {
//                     await saveData(carDetails);
//                 }
//             } catch (error) {
//                 console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${link}:`, error);
//             }
//         }
//     } catch (error) {
//         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞:", error);
//     }

//     console.log("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.");
// })();

const { scrapeListings } = require("./pages/listings");
const { scrapeCarDetails } = require("./pages/details");
const { parseAndSave } = require("./utils/saveData");

const CONCURRENT_LIMIT = 5; // –°–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
const BATCH_SIZE = 50; // –°–∫–æ–ª—å–∫–æ –º–∞—à–∏–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑

(async () => {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...");

    const activePromises = new Set();
    const carsToSave = [];

    try {
        for await (const link of scrapeListings()) {
            console.log(`üöó –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: ${link}`);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—à–∏–Ω—ã
            const promise = scrapeCarDetails(link)
                .then(carDetails => {
                    if (carDetails) {
                        carsToSave.push(carDetails);
                    }
                })
                .catch(error => {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${link}:`, error);
                })
                .finally(() => {
                    activePromises.delete(promise);
                });

            activePromises.add(promise);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
            if (activePromises.size >= CONCURRENT_LIMIT) {
                await Promise.race(activePromises);
            }

            // –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏ BATCH_SIZE –∑–∞–ø–∏—Å–µ–π ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if (carsToSave.length >= BATCH_SIZE) {
                await parseAndSave([...carsToSave]); // –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                carsToSave.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            }
        }

        // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        await Promise.all(activePromises);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        if (carsToSave.length > 0) {
            await parseAndSave(carsToSave);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞:", error);
    }

    console.log("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.");
})();