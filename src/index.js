require('dotenv').config();
const { runCyclicParsing } = require("../run_parsers");

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä...');
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä...');
    process.exit(0);
});

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const mode = process.argv[2] || process.env.PARSER_MODE || 'cycle';
const parserNames = process.argv[3] ? process.argv[3].split(',') : (process.env.PARSER_NAMES ? process.env.PARSER_NAMES.split(',') : []);
const globalConfig = {
    maxPages: parseInt(process.env.MAX_PAGES) || 10,
    delayBetweenRequests: parseInt(process.env.DELAY_MS) || 1000,
    enableImageLoading: process.env.ENABLE_IMAGES === 'true'
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
(async () => {
    console.log("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞:");
    console.log(`   –†–µ–∂–∏–º: ${mode}`);
    console.log(`   –ü–∞—Ä—Å–µ—Ä—ã: ${parserNames.length > 0 ? parserNames.join(', ') : '–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ'}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: ${globalConfig.maxPages}`);
    console.log(`   –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: ${globalConfig.delayBetweenRequests}ms`);
    console.log(`   –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${globalConfig.enableImageLoading}`);
    console.log("");

    if (mode === 'cycle') {
        // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –ø–∞—Ä—Å–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        console.log("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ");
        await runCyclicParsing();
    } else if (mode === 'single') {
        // –û–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        console.log(`üéØ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ`);
        await runCyclicParsing();
    } else {
        console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: ${mode}`);
        console.log("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: cycle, single");
    }
})();