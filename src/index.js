const { scrapeListings } = require("./pages/listings");
const { scrapeCarDetails } = require("./pages/details");
const { parseAndSave } = require("./utils/saveData");
const { startBrowser } = require("./utils/browser");

const CONCURRENT_LIMIT = 5; // üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
const BATCH_SIZE = 10; // üîπ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –∫–∞–∂–¥—ã–µ 10 –º–∞—à–∏–Ω
const RESTART_BROWSER_THRESHOLD = 1000; // üîπ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∫–∞–∂–¥—ã–µ 1000 –º–∞—à–∏–Ω

let browser;
let context;
let totalParsed = 0;
const activePromises = new Set();
const carsToSave = [];

async function restartBrowser() {
    console.log("‚ôª –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...");
    if (browser) {
        await browser.close();
    }
    browser = await startBrowser();
    context = await browser.newContext();
}

(async () => {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...");
    await restartBrowser(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä

    try {
        for await (const link of scrapeListings(context)) {
            console.log(`üöó –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: ${link}`);

            while (activePromises.size >= CONCURRENT_LIMIT) {
                await Promise.race(activePromises); // üîπ –ñ–¥—ë–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            }

            const promise = scrapeCarDetails(link, context)
                .then(carDetails => {
                    if (carDetails) {
                        carsToSave.push(carDetails);
                        totalParsed++;
                    }
                })
                .catch(error => {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${link}:`, error);
                })
                .finally(() => {
                    activePromises.delete(promise); // üîπ –£–¥–∞–ª—è–µ–º promise —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                });

            activePromises.add(promise);

            // üîπ –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏ BATCH_SIZE –∑–∞–ø–∏—Å–µ–π ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if (carsToSave.length >= BATCH_SIZE) {
                await parseAndSave([...carsToSave]);
                carsToSave.length = 0;
            }

            // üîπ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –∫–∞–∂–¥—ã–µ RESTART_BROWSER_THRESHOLD –∑–∞–ø–∏—Å–µ–π
            if (totalParsed >= RESTART_BROWSER_THRESHOLD) {
                console.log("üõë –î–æ–∂–¥—ë–º—Å—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –±—Ä–∞—É–∑–µ—Ä–∞...");
                await Promise.all(activePromises); // üîπ –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
                activePromises.clear(); // üîπ –û—á–∏—Å—Ç–∏—Ç—å Set –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
                await restartBrowser();
                totalParsed = 0;
            }
        }

        // üîπ –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        await Promise.all(activePromises);

        // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        if (carsToSave.length > 0) {
            await parseAndSave(carsToSave);
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞:", error);
    } finally {
        console.log("üîª –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...");
        if (browser) await browser.close();
        if (global.gc) global.gc(); // üîπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Garbage Collector
    }

    console.log("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.");
})();