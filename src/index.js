// const { scrapeListings } = require("./pages/listings");
// const { scrapeCarDetails } = require("./pages/details");
// const { saveData } = require("./utils/saveData");


// (async () => {
//     console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...");

//     try {
//         for await (const link of scrapeListings()) { // üî• –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–π
//             console.log(`üöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${link}`);
//             try {
//                 const carDetails = await scrapeCarDetails(link);
//                 if (carDetails) {
//                     await saveData(carDetails);
//                 }
//             } catch (error) {
//                 console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${link}:`, error);
//             }
//         }
//     } catch (error) {
//         console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞:", error);
//     }

//     console.log("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.");
// })();

const { scrapeListings } = require("./pages/listings");
const { scrapeCarDetails } = require("./pages/details");
const { saveData } = require("./utils/saveData");
const pool = require("./db"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID –∏–∑ –±–∞–∑—ã
async function getLastSavedId() {
    try {
        const res = await pool.query("SELECT MAX(id) AS last_id FROM car_listings");
        return res.rows[0].last_id || 0; // –ï—Å–ª–∏ –±–∞–∑—ã –ø—É—Å—Ç–∞—è, –≤–µ—Ä–Ω—É—Ç—å 0
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID:", error);
        return 0;
    }
}

(async () => {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...");

    try {
        const lastId = await getLastSavedId();
        console.log(`üìå –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π ID: ${lastId}`);

        for await (const link of scrapeListings()) { // üî• –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –æ–¥–Ω–æ–π
            const idMatch = link.match(/-(\d+)$/); // –ü–∞—Ä—Å–∏–º ID –∏–∑ —Å—Å—ã–ª–∫–∏
            const carId = idMatch ? parseInt(idMatch[1], 10) : null;

            if (!carId || carId <= lastId) {
                console.log(`‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å: ${link}`);
                continue;
            }

            console.log(`üöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${link}`);
            try {
                const carDetails = await scrapeCarDetails(link);
                if (carDetails) {
                    await saveData(carDetails);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${link}:`, error);
            }
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–µ—Ä–∞:", error);
    }

    console.log("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.");
})();