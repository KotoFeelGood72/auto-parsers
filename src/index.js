const { scrapeListings } = require('./pages/listings');
const { scrapeCarDetails } = require('./pages/details');
const { saveData } = require('./utils/saveData');

(async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...');

    const links = await scrapeListings();

    if (links.length === 0) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–∫–∞.');
        return;
    }

    const results = [];

    for (let link of links.slice(0, 5)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∞
        if (!link || typeof link !== 'string') {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞: URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è undefined –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.');
            continue;
        }

        const carDetails = await scrapeCarDetails(link);
        if (carDetails) results.push(carDetails);
    }

    saveData('dubizzle_cars', results);
    console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.');
})();